{
  "swagger": "2.0",
  "info": {
    "title": "Clinical6 (params in:formData)",
    "description": "\n\u003cp\u003eClinical6 is a CMS platform that provides the content for mobile\napplications\u003c/p\u003e\n",
    "version": "1.0",
    "x-copyright": null
  },
  "basePath": "/",
  "consumes": [
    "application/x-www-form-urlencoded",
    "multipart/form-data"
  ],
  "paths": {
    "/v3/base/meta": {
      "get": {
        "tags": [
          "v3base"
        ],
        "operationId": "getv3_base_meta",
        "parameters": [],
        "responses": {
          "404": {
            "description": "The primary resource could not be found (by Id)."
          },
          "422": {
            "description": "The action cannot be completed as requested. This often stems from invalid parameters or data being given."
          },
          "401": {
            "description": "The authentication process has failed."
          },
          "403": {
            "description": "The authorization process has failed. You are authenticated, but the user cannot perform the requested action"
          }
        }
      }
    },
    "/v3/settings": {
      "get": {
        "tags": [
          "v3settings"
        ],
        "operationId": "get_v3_settings",
        "summary": "list all available settings",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/settings/{id}": {
      "patch": {
        "tags": [
          "v3settings"
        ],
        "operationId": "patch_v3_settings_id",
        "summary": "Updates the Setting with the supplied var(presented by id parameter) with the supplied value attribute",
        "parameters": [
          {
            "name": "data[attributes][value]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'setting'"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/user_roles": {
      "get": {
        "tags": [
          "v3user_roles"
        ],
        "operationId": "get_v3_user_roles",
        "summary": "List all scoped User Roles",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3user_roles"
        ],
        "operationId": "post_v3_user_roles",
        "summary": "Create a new User Role with the supplied attributes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/user_roles/{id}": {
      "get": {
        "tags": [
          "v3user_roles"
        ],
        "operationId": "get_v3_user_roles_id",
        "summary": "Show the User Role resource with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3user_roles"
        ],
        "operationId": "patch_v3_user_roles_id",
        "summary": "Updates the User Role with the supplied ID with the supplied attributes",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested  User Role"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/evaluator/evaluations": {
      "get": {
        "tags": [
          "v3evaluatorevaluations"
        ],
        "operationId": "getv3_evaluator_evaluations",
        "summary": "Retrieve all the evaluations defined in the system",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3evaluatorevaluations"
        ],
        "operationId": "postv3_evaluator_evaluations",
        "summary": "Create an evaluation",
        "parameters": [
          {
            "name": "data[attributes][permanent_link]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be unique"
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][name]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "422": {
            "description": null
          }
        }
      }
    },
    "/v3/evaluator/evaluations/{id}": {
      "patch": {
        "tags": [
          "v3evaluatorevaluations"
        ],
        "operationId": "patchv3_evaluator_evaluations_id",
        "summary": "Update an evaluation",
        "parameters": [
          {
            "name": "data[attributes][permanent_link]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be unique"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][name]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "422": {
            "description": null
          }
        }
      }
    },
    "/v3/related_users": {
      "post": {
        "tags": [
          "v3related_users"
        ],
        "operationId": "postv3_related_users",
        "summary": "Creates the related user join record thus creating                                    a follower/followed relationship between two users.",
        "parameters": [
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_users' or 'users'"
          },
          {
            "name": "data[attributes][relationship]",
            "type": "string",
            "in": "formData",
            "description": "Relationship description. Example: 'Father', 'Mother', etc."
          },
          {
            "name": "data[attributes][dependant]",
            "type": "boolean",
            "in": "formData",
            "description": "Mark as dependant relationship. Defaults to 'false'"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/related_users/{id}": {
      "patch": {
        "tags": [
          "v3related_users"
        ],
        "operationId": "patchv3_related_users_id",
        "summary": "Updates a followed/follower relationship between two users",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of a given followed/follower relationship"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3related_users"
        ],
        "operationId": "deletev3_related_users_id",
        "summary": "Deletes a followed/follower relationship between two users",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of a given followed/follower relationship"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/trials/sites": {
      "get": {
        "tags": [
          "v3trialssites"
        ],
        "operationId": "get_v3_trials_sites",
        "summary": "List all scoped Sites",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3trialssites"
        ],
        "operationId": "post_v3_trials_sites",
        "summary": "Create a new Site with the supplied attributes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/trials/sites/{id}": {
      "get": {
        "tags": [
          "v3trialssites"
        ],
        "operationId": "get_v3_trials_sites_id",
        "summary": "Show the Site resource with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3trialssites"
        ],
        "operationId": "patch_v3_trials_sites_id",
        "summary": "Updates the Cr Trials/Site with the supplied ID with the supplied attributes",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested  Cr Trials/Site"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3trialssites"
        ],
        "operationId": "delete_v3_trials_sites_id",
        "summary": "Destroys the Cr Trials/Site with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Cr Trials/Site"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/trials/site_members": {
      "get": {
        "tags": [
          "v3trialssite_members"
        ],
        "operationId": "get_v3_trials_site_members",
        "summary": "List all scoped SiteMembers including their site and profile.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3trialssite_members"
        ],
        "operationId": "post_v3_trials_site_members",
        "summary": "Create a new SiteMember with the supplied attributes",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'site_members'"
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the requested resource to change (For update only)"
          },
          {
            "name": "data[member_type]",
            "type": "string",
            "in": "formData",
            "description": "The type of member for the site can be one of: patient, pi, mrn"
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Mobile user"
          },
          {
            "name": "data[relationships][site][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'sites'"
          },
          {
            "name": "data[relationships][site][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Site"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/trials/site_members/{id}": {
      "get": {
        "tags": [
          "v3trialssite_members"
        ],
        "operationId": "get_v3_trials_site_members_id",
        "summary": "Show the SiteMember resource with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3trialssite_members"
        ],
        "operationId": "patch_v3_trials_site_members_id",
        "summary": "Updates the SiteMember with the supplied ID with the supplied attributes",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested SiteMember"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'site_members'"
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the requested resource to change (For update only)"
          },
          {
            "name": "data[member_type]",
            "type": "string",
            "in": "formData",
            "description": "The type of member for the site can be one of: patient, pi, mrn"
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Mobile user"
          },
          {
            "name": "data[relationships][site][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'sites'"
          },
          {
            "name": "data[relationships][site][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Site"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3trialssite_members"
        ],
        "operationId": "delete_v3_trials_site_members_id",
        "summary": "Destroys the SiteMember with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested SiteMember"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/registration_validation": {
      "post": {
        "tags": [
          "v3mobile_usersregistration_validations"
        ],
        "operationId": "postv3_mobile_users_registration_validation",
        "summary": "Validates the status of the registration. Returning the status if valid",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'registration_validation'"
          },
          {
            "name": "data[attributes][account_name]",
            "type": "string",
            "in": "formData",
            "description": "Account name of the registration that will be validated. Only send if no email is provided"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "description": "Email of the registration that will be validated. Only send if no account_name is provided"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/password": {
      "post": {
        "tags": [
          "v3mobile_userspasswords"
        ],
        "operationId": "postv3_mobile_users_password",
        "summary": "Request Password Reset",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'password_reset'"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "description": "The email of the mobile user"
          },
          {
            "name": "data[attributes][account_name]",
            "type": "string",
            "in": "formData",
            "description": "The account_name of the mobile user"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3mobile_userspasswords"
        ],
        "operationId": "patchv3_mobile_users_password",
        "summary": "Reset password",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'password_reset'"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "description": "User Email"
          },
          {
            "name": "data[attributes][reset_password_token]",
            "type": "string",
            "in": "formData",
            "description": "The password reset token supplied by the #create endpoint (via email)"
          },
          {
            "name": "data[attributes][password]",
            "type": "string",
            "in": "formData",
            "description": "The requested _new_ password"
          },
          {
            "name": "data[relationships][devices][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'devices'"
          },
          {
            "name": "data[relationships][devices][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The Id of the device created previously for attachment"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/session": {
      "post": {
        "tags": [
          "v3mobile_userssessions"
        ],
        "operationId": "postv3_mobile_users_session",
        "summary": "Sign In",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'sessions'"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "description": "The mobile user's email address"
          },
          {
            "name": "data[attributes][account_name]",
            "type": "string",
            "in": "formData",
            "description": "The mobile user's account name"
          },
          {
            "name": "data[attributes][password]",
            "type": "string",
            "in": "formData",
            "description": "The mobile user's password"
          },
          {
            "name": "data[relationships][devices][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'devices'"
          },
          {
            "name": "data[relationships][devices][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The Id of the device created previously for attachment"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "get": {
        "tags": [
          "v3mobile_userssessions"
        ],
        "operationId": "getv3_mobile_users_session",
        "summary": "Status",
        "parameters": [
          {
            "name": "access_token",
            "type": "string",
            "in": "query",
            "description": "Access token assigned to the current device 'logged in' to the platform"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/sessions": {
      "delete": {
        "tags": [
          "v3mobile_userssessions"
        ],
        "operationId": "deletev3_mobile_users_sessions",
        "summary": "Sign out",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/invitation": {
      "post": {
        "tags": [
          "v3mobile_usersinvitations"
        ],
        "operationId": "postv3_mobile_users_invitation",
        "summary": "Create an Invitation",
        "parameters": [
          {
            "name": "data[relationships][followed][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][followed][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][language][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][language][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][site][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][site][data][type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be trials__sites"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be 'invitations'"
          },
          {
            "name": "data[attributes][role]",
            "type": "string",
            "in": "formData",
            "description": "Permenant link of the role you wish to pre-assign to the given user"
          },
          {
            "name": "data[attributes][phone]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][first_name]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][last_name]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][suffix]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][dob]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][account_name]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][language_iso]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][relationship]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][member_type]",
            "type": "string",
            "in": "formData",
            "description": "Needed when you provide a site relationship only. Must be one of \"patient\", \"pi\" or \"mrn\"."
          },
          {
            "name": "data[attributes][dependant]",
            "type": "boolean",
            "in": "formData",
            "description": "Mark as dependant relationship. Defaults to 'false'"
          },
          {
            "name": "data[attributes][dynamic_profile][whitelisted_attribute]",
            "type": "string",
            "in": "formData",
            "description": "This is an example. The endpoint allows for an _whitelisted_ 'dynamic attributes' to be set on the profile"
          },
          {
            "name": "data[relationships][user_role][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'user_roles'"
          },
          {
            "name": "data[relationships][user_role][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related User role"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3mobile_usersinvitations"
        ],
        "operationId": "patchv3_mobile_users_invitation",
        "summary": "Accept an Invitation",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'invitations'"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "description": "invitee email"
          },
          {
            "name": "data[attributes][invitation_token]",
            "type": "string",
            "in": "formData",
            "description": "The alphanumeric token supplied (usually via email) to the user for invitation to the system."
          },
          {
            "name": "data[attributes][password]",
            "type": "string",
            "in": "formData",
            "description": "The password that will be associated with the mobile user"
          },
          {
            "name": "data[relationships][devices][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'devices'"
          },
          {
            "name": "data[relationships][devices][id]",
            "type": "number",
            "in": "formData",
            "description": "The Id of the device you wish to associate with the mobile user"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/confirmation": {
      "post": {
        "tags": [
          "v3mobile_usersconfirmations"
        ],
        "operationId": "postv3_mobile_users_confirmation",
        "summary": "Create (sends a confirmation email to the mobile user's email)",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'confirmation'"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "description": "The mobile_user's email."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "get": {
        "tags": [
          "v3mobile_usersconfirmations"
        ],
        "operationId": "getv3_mobile_users_confirmation",
        "summary": "Confirm (supplying the confirmation token from the email)",
        "parameters": [
          {
            "name": "confirmation_token",
            "type": "string",
            "in": "query",
            "description": "The unique random token sent via email."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "put": {
        "tags": [
          "v3mobile_usersconfirmations"
        ],
        "operationId": "putv3_mobile_users_confirmation",
        "summary": "Confirm the mobile user account",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'confirmation'"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "description": "The mobile_user's email."
          },
          {
            "name": "data[attributes][confirmation_token]",
            "type": "string",
            "in": "formData",
            "description": "The (usually) unique and random token (usually) sent via email."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/registrations": {
      "post": {
        "tags": [
          "v3mobile_usersregistrations"
        ],
        "operationId": "postv3_mobile_users_registrations",
        "summary": "Sign Up",
        "parameters": [
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_user_registration'"
          },
          {
            "name": "data[attributes][guest]",
            "type": "boolean",
            "in": "formData",
            "description": "The created user should be a guest"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "description": "The user's email address"
          },
          {
            "name": "data[attributes][account_name]",
            "type": "string",
            "in": "formData",
            "description": "Account Name"
          },
          {
            "name": "data[attributes][password]",
            "type": "string",
            "in": "formData",
            "description": "Password"
          },
          {
            "name": "data[relationships][devices][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'devices'"
          },
          {
            "name": "data[relationships][devices][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The Id of the device created previously for attachment"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/cohort_assignments": {
      "post": {
        "tags": [
          "v3cohort_assignments"
        ],
        "operationId": "postv3_cohort_assignments",
        "summary": "Create an association between a cohort and a user.",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'cohort_assignments'"
          },
          {
            "name": "data[relationships][cohort][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'cohorts'"
          },
          {
            "name": "data[relationships][cohort][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Cohort"
          },
          {
            "name": "data[relationships][user][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'user | mobile_user'"
          },
          {
            "name": "data[relationships][user][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related User"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/cohort_assignments/{id}": {
      "delete": {
        "tags": [
          "v3cohort_assignments"
        ],
        "operationId": "deletev3_cohort_assignments_id",
        "summary": "Destroys the Cohort Assignment with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Cohort Assignment"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/cohort/{id}/cohort_assignments": {
      "get": {
        "tags": [
          "v3cohort_assignments"
        ],
        "operationId": "getv3_cohort_id_cohort_assignments",
        "summary": "List cohort assignments associated with the given cohort",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/locations": {
      "get": {
        "tags": [
          "v3locations"
        ],
        "operationId": "get_v3_locations",
        "summary": "List all locations, can sorted by localizable_type and localizable_id",
        "parameters": [
          {
            "name": "filters[localizable_type]",
            "type": "string",
            "in": "query"
          },
          {
            "name": "filters[localizable_id]",
            "type": "number",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3locations"
        ],
        "operationId": "postv3_locations",
        "summary": "creates a new location",
        "parameters": [
          {
            "name": "data[relationships][localizable][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][localizable][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'locations'"
          },
          {
            "name": "data[attributes][title]",
            "type": "string",
            "in": "formData",
            "description": "title"
          },
          {
            "name": "data[attributes][address_line_1]",
            "type": "string",
            "in": "formData",
            "description": "Address line 1"
          },
          {
            "name": "data[attributes][address_line_2]",
            "type": "string",
            "in": "formData",
            "description": "Address line 2"
          },
          {
            "name": "data[attributes][address_line_3]",
            "type": "string",
            "in": "formData",
            "description": "Address line 3"
          },
          {
            "name": "data[attributes][city]",
            "type": "string",
            "in": "formData",
            "description": "City"
          },
          {
            "name": "data[attributes][state]",
            "type": "string",
            "in": "formData",
            "description": "State"
          },
          {
            "name": "data[attributes][country]",
            "type": "string",
            "in": "formData",
            "description": "Country"
          },
          {
            "name": "data[attributes][zip_code]",
            "type": "string",
            "in": "formData",
            "description": "Zip Code"
          },
          {
            "name": "data[attributes][localizable_id]",
            "type": "string",
            "in": "formData",
            "description": "Zip Code"
          },
          {
            "name": "data[attributes][localizable_type]",
            "type": "string",
            "in": "formData",
            "description": "Zip Code"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/locations/{id}": {
      "get": {
        "tags": [
          "v3locations"
        ],
        "operationId": "get_v3_locations_id",
        "summary": "Show the location resource with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3locations"
        ],
        "operationId": "patchv3_locations_id",
        "summary": "update location with supplied ID",
        "parameters": [
          {
            "name": "data[relationships][localizable][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][localizable][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'locations'"
          },
          {
            "name": "data[attributes][title]",
            "type": "string",
            "in": "formData",
            "description": "title"
          },
          {
            "name": "data[attributes][address_line_1]",
            "type": "string",
            "in": "formData",
            "description": "Address line 1"
          },
          {
            "name": "data[attributes][address_line_2]",
            "type": "string",
            "in": "formData",
            "description": "Address line 2"
          },
          {
            "name": "data[attributes][address_line_3]",
            "type": "string",
            "in": "formData",
            "description": "Address line 3"
          },
          {
            "name": "data[attributes][city]",
            "type": "string",
            "in": "formData",
            "description": "City"
          },
          {
            "name": "data[attributes][state]",
            "type": "string",
            "in": "formData",
            "description": "State"
          },
          {
            "name": "data[attributes][country]",
            "type": "string",
            "in": "formData",
            "description": "Country"
          },
          {
            "name": "data[attributes][zip_code]",
            "type": "string",
            "in": "formData",
            "description": "Zip Code"
          },
          {
            "name": "data[attributes][localizable_id]",
            "type": "string",
            "in": "formData",
            "description": "Zip Code"
          },
          {
            "name": "data[attributes][localizable_type]",
            "type": "string",
            "in": "formData",
            "description": "Zip Code"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/data_collection/flow_processes": {
      "get": {
        "tags": [
          "v3data_collectionflow_processes"
        ],
        "operationId": "getv3_data_collection_flow_processes",
        "summary": "List all flow processes with limited attributes of name, permanent_link and published_at",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3data_collectionflow_processes"
        ],
        "operationId": "post_v3_data_collection_flow_processes",
        "summary": "Create a new Data Collection/Flow Process with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][permanent_link]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The flow process name in permanent link format"
          },
          {
            "name": "data[attributes][name]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The flow process name"
          },
          {
            "name": "data[attributes][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'data_collection__flow_processes'"
          },
          {
            "name": "data[attributes][consent_credentials]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][owner_type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][conditional_paths]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/data_collection/flow_process_values/{id}": {
      "get": {
        "tags": [
          "v3data_collectionflow_process_values"
        ],
        "operationId": "getv3_data_collection_flow_process_values_id",
        "summary": "retrieve captured_values for a given captured_value_group ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested CapturedValueGroup the values are associated with."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3data_collectionflow_process_values"
        ],
        "operationId": "delete_v3_data_collection_flow_process_values_id",
        "summary": "Soft-deletes/Hides the resource with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested CapturedValueGroup the values are associated with."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/data_collection/flow_process_values": {
      "post": {
        "tags": [
          "v3data_collectionflow_process_values"
        ],
        "operationId": "postv3_data_collection_flow_process_values",
        "summary": "creates captured_values for a given flow_process",
        "parameters": [
          {
            "name": "data[relationships][owner][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][owner][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][flow_process][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][flow_process][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][input_value]",
            "type": "number",
            "in": "formData",
            "required": true,
            "description": "key is the input_id and value is the answer"
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][captured_value_group][data][type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][captured_value_group][data][id]",
            "type": "number",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/data_collection/captured_value_groups": {
      "get": {
        "tags": [
          "v3data_collectioncaptured_value_groups"
        ],
        "operationId": "getv3_data_collection_captured_value_groups",
        "summary": "renders all captured value groups",
        "parameters": [
          {
            "name": "filters[captured_values][id]",
            "type": "number",
            "in": "query",
            "description": "The id of the captured value that points to the group to be returned by this endpoint."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/data_collection/captured_value_groups/{id}": {
      "get": {
        "tags": [
          "v3data_collectioncaptured_value_groups"
        ],
        "operationId": "getv3_data_collection_captured_value_groups_id",
        "summary": "renders a captured value group given it's ID. (DEPRECATED)",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/data_collection/captured_value_groups/{captured_value_group_id}": {
      "patch": {
        "tags": [
          "v3data_collectioncaptured_value_groups"
        ],
        "operationId": "patchv3_data_collection_captured_value_groups_captured_value_group_id",
        "summary": "Update a Captured Value Group",
        "parameters": [
          {
            "name": "captured_value_group_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'captured_value_groups'"
          },
          {
            "name": "data[attributes][final_submission]",
            "type": "string",
            "in": "formData",
            "description": "The status of the Captured Value Group, on of: [false, true]"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/.well-known/apple-app-site-association": {
      "get": {
        "tags": [
          "v3universal_links"
        ],
        "operationId": "get_.well-known_apple-app-site-association",
        "summary": "The json file for 'apple-app-site-association'",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/.well-known/assetlinks": {
      "get": {
        "tags": [
          "v3universal_links"
        ],
        "operationId": "get_.well-known_assetlinks",
        "summary": "The json file for the android 'assetlinks'",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/statuses/check": {
      "post": {
        "tags": [
          "v3status_check"
        ],
        "operationId": "post_v3_statuses_check",
        "summary": "Finds or creates a status for the given object and owner combination",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/file_uploads": {
      "post": {
        "tags": [
          "v3file_uploads"
        ],
        "operationId": "postv3_file_uploads",
        "parameters": [
          {
            "name": "file",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The binaries of the file to upload."
          },
          {
            "name": "attribute",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The field name where the file will be attached to the entity."
          },
          {
            "name": "type",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The name of the entity, class or record type in order to search for it in the correct table."
          },
          {
            "name": "id",
            "type": "number",
            "in": "formData",
            "description": "The ID of the record to associate the file to. This isn't necesary if the desired type is a 'setting'"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/reminder/events": {
      "get": {
        "tags": [
          "v3reminderevents"
        ],
        "operationId": "get_v3_reminder_events",
        "summary": "List all scoped Reminder/Events",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3reminderevents"
        ],
        "operationId": "post_v3_reminder_events",
        "summary": "Create a new Reminder/Event with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][date]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'reminder__events'"
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the requested resource to change (For update only)"
          },
          {
            "name": "data[attributes][status]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[attributes][extras]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][reminder__rule][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'reminder__rules'"
          },
          {
            "name": "data[relationships][reminder__rule][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Reminder  rule"
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Mobile user"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/reminder/events/{id}": {
      "get": {
        "tags": [
          "v3reminderevents"
        ],
        "operationId": "get_v3_reminder_events_id",
        "summary": "Show the Reminder/Event resource with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3reminderevents"
        ],
        "operationId": "patch_v3_reminder_events_id",
        "summary": "Create a new Reminder/Event with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][date]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Reminder/Event"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'reminder__events'"
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the requested resource to change (For update only)"
          },
          {
            "name": "data[attributes][status]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[attributes][extras]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][reminder__rule][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'reminder__rules'"
          },
          {
            "name": "data[relationships][reminder__rule][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Reminder  rule"
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Mobile user"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3reminderevents"
        ],
        "operationId": "delete_v3_reminder_events_id",
        "summary": "Destroys the Reminder/Event with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Reminder/Event"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/reminder/rules": {
      "get": {
        "tags": [
          "v3reminderrules"
        ],
        "operationId": "get_v3_reminder_rules",
        "summary": "List all scoped Reminder/Rules",
        "parameters": [
          {
            "name": "attributes[permanent_link]",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "Can be used to identify the rule. It is unique"
          },
          {
            "name": "attributes[label]",
            "type": "string",
            "in": "query",
            "description": "Friendly name that can be displayed to an end user"
          },
          {
            "name": "relationships[schedulers]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3reminderrules"
        ],
        "operationId": "post_v3_reminder_rules",
        "summary": "Create a new Reminder/Rule with the supplied attributes",
        "parameters": [
          {
            "name": "attributes[permanent_link]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Can be used to identify the rule. It is unique"
          },
          {
            "name": "attributes[label]",
            "type": "string",
            "in": "formData",
            "description": "Friendly name that can be displayed to an end user"
          },
          {
            "name": "relationships[schedulers]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/reminder/rules/{id}": {
      "get": {
        "tags": [
          "v3reminderrules"
        ],
        "operationId": "get_v3_reminder_rules_id",
        "summary": "Show the Reminder/Rule resource with the supplied ID",
        "parameters": [
          {
            "name": "attributes[permanent_link]",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "Can be used to identify the rule. It is unique"
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          },
          {
            "name": "attributes[label]",
            "type": "string",
            "in": "query",
            "description": "Friendly name that can be displayed to an end user"
          },
          {
            "name": "relationships[schedulers]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3reminderrules"
        ],
        "operationId": "delete_v3_reminder_rules_id",
        "summary": "Destroys the Reminder/Rule with the supplied ID if allowed",
        "parameters": [
          {
            "name": "attributes[permanent_link]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Can be used to identify the rule. It is unique"
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Reminder/Rule"
          },
          {
            "name": "attributes[label]",
            "type": "string",
            "in": "formData",
            "description": "Friendly name that can be displayed to an end user"
          },
          {
            "name": "relationships[schedulers]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/agreement/templates": {
      "get": {
        "tags": [
          "v3agreementtemplates"
        ],
        "operationId": "get_v3_agreement_templates",
        "summary": "List all of the agreement templates.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3agreementtemplates"
        ],
        "operationId": "post_v3_agreement_templates",
        "summary": "Creates an agreement template.",
        "parameters": [
          {
            "name": "data[attributes][permanent_link]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][description]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][template_name]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'agreement__templates'"
          },
          {
            "name": "data[attributes][approval_required]",
            "type": "boolean",
            "in": "formData",
            "description": "Flag for approval requirement"
          },
          {
            "name": "data[attributes][expiration]",
            "type": "number",
            "in": "formData",
            "description": "Number of days until agreement expires, omit if template doesn't expire"
          },
          {
            "name": "data[attributes][reminder_frequency]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/agreement/templates/{id}": {
      "patch": {
        "tags": [
          "v3agreementtemplates"
        ],
        "operationId": "patchv3_agreement_templates_id",
        "summary": "Update an template provided by id",
        "parameters": [
          {
            "name": "data[attributes][permanent_link]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][description]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][template_name]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'agreement__templates'"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[attributes][approval_required]",
            "type": "boolean",
            "in": "formData",
            "description": "Flag for approval requirement"
          },
          {
            "name": "data[attributes][expiration]",
            "type": "number",
            "in": "formData",
            "description": "Number of days until agreement expires, omit if template doesn't expire"
          },
          {
            "name": "data[attributes][reminder_frequency]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/agreement/template_fields": {
      "post": {
        "tags": [
          "v3agreementtemplate_fields"
        ],
        "operationId": "postv3_agreement_template_fields",
        "summary": "Create a new Agreement/Template Field with the supplied attributes, its attribute_name must match one of the source model fields",
        "parameters": [
          {
            "name": "data[relationships][agreement_template][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][agreement_template][data][type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'agreement__template'"
          },
          {
            "name": "data[attributes][source_type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][required]",
            "type": "boolean",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][field_name]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][label]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'agreement__template_field'"
          },
          {
            "name": "data[attributes][default_value]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][attribute_name]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][signer_index]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[attributes][is_captured_value]",
            "type": "boolean",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/agreement/template_fields/{id}": {
      "delete": {
        "tags": [
          "v3agreementtemplate_fields"
        ],
        "operationId": "deletev3_agreement_template_fields_id",
        "summary": "Destroy template field find by id",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/navigation/action_details": {
      "get": {
        "tags": [
          "v3navigationaction_details"
        ],
        "operationId": "getv3_navigation_action_details",
        "summary": "List all action details.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/navigation/app_menus": {
      "post": {
        "tags": [
          "v3navigationapp_menus"
        ],
        "operationId": "postv3_navigation_app_menus",
        "summary": "Creates an App Menu.",
        "parameters": [
          {
            "name": "data[attributes][action]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "              about_us | alerts | appointments | ar | arts | badges | brands | breath_assessment |\n              calendar | captured_value_groups | care_circle | companion | companions | comply_scan | contact | container | cost_calculator |\n              data_collection | diamond_club | dynamic_contents | ediary | email | event_report | events | external_url |\n              faq | favorites | flow_process | galleries | give_points | glossary | health_measurements | home | information | key_terms |\n              logout | map | menu | my_trial | news | no_action | offers | outage_map | pain_assessment | payment_locator | personal_center |\n              places | privacy_policy | profile | push_notification | reminders | report_an_outage | rewards |\n              scavenger | send_message | settings | share | social | static_screen | subcategory | surveys |\n              tagged_contents | technical_support | terms | tou | tracker | trial | unknown | url | video | video_consult | videos\n"
          },
          {
            "name": "data[attributes][title]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'navigation__app_menus'"
          },
          {
            "name": "data[relationships][action_detail][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'data_collection__flow_process | dynamic_content__content_types | data_collection__containers | navigation__predefined_screens'"
          },
          {
            "name": "data[relationships][action_detail][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Action detail"
          },
          {
            "name": "data[relationships][parent_app_menu][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'navigation__app_menus'"
          },
          {
            "name": "data[relationships][parent_app_menu][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Parent app menu"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "get": {
        "tags": [
          "v3navigationapp_menus"
        ],
        "operationId": "getv3_navigation_app_menus",
        "summary": "Returns a the list of App Menus.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/navigation/app_menus/{id}": {
      "delete": {
        "tags": [
          "v3navigationapp_menus"
        ],
        "operationId": "deletev3_navigation_app_menus_id",
        "summary": "Delete an App Menu.",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true
          },
          {
            "name": "options[cascade]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3navigationapp_menus"
        ],
        "operationId": "patchv3_navigation_app_menus_id",
        "summary": "Update an App Menu.",
        "parameters": [
          {
            "name": "data[attributes][action]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "              about_us | alerts | appointments | ar | arts | badges | brands | breath_assessment |\n              calendar | captured_value_groups | care_circle | companion | companions | comply_scan | contact | container | cost_calculator |\n              data_collection | diamond_club | dynamic_contents | ediary | email | event_report | events | external_url |\n              faq | favorites | flow_process | galleries | give_points | glossary | health_measurements | home | information | key_terms |\n              logout | map | menu | my_trial | news | no_action | offers | outage_map | pain_assessment | payment_locator | personal_center |\n              places | privacy_policy | profile | push_notification | reminders | report_an_outage | rewards |\n              scavenger | send_message | settings | share | social | static_screen | subcategory | surveys |\n              tagged_contents | technical_support | terms | tou | tracker | trial | unknown | url | video | video_consult | videos\n"
          },
          {
            "name": "data[attributes][title]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'navigation__app_menus'"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[relationships][action_detail][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'data_collection__flow_process | dynamic_content__content_types | data_collection__containers | navigation__predefined_screens'"
          },
          {
            "name": "data[relationships][action_detail][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Action detail"
          },
          {
            "name": "data[relationships][parent_app_menu][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'navigation__app_menus'"
          },
          {
            "name": "data[relationships][parent_app_menu][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Parent app menu"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/devices": {
      "get": {
        "tags": [
          "v3devices"
        ],
        "operationId": "getv3_devices",
        "summary": "List",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3devices"
        ],
        "operationId": "postv3_devices",
        "summary": "Create",
        "parameters": [
          {
            "name": "data[attributes][technology]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The technology of the device, one of: [ios, andriod, web]"
          },
          {
            "name": "data[attributes][push_id]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/devices/{{id}}": {
      "get": {
        "tags": [
          "v3devices"
        ],
        "operationId": "getv3_devices_{id}",
        "summary": "Show",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3devices"
        ],
        "operationId": "patchv3_devices_{id}",
        "summary": "Update",
        "parameters": [
          {
            "name": "data[attributes][technology]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The technology of the device, one of: [ios, andriod, web]"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[attributes][push_id]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3devices"
        ],
        "operationId": "deletev3_devices_{id}",
        "summary": "Destroy",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/cohorts": {
      "post": {
        "tags": [
          "v3cohorts"
        ],
        "operationId": "postv3_cohorts",
        "summary": "Creates a Cohort.",
        "parameters": [
          {
            "name": "data[attributes][cohort_type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "either \"dynamic\" or \"static\""
          },
          {
            "name": "data[attributes][name]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'cohorts'"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "get": {
        "tags": [
          "v3cohorts"
        ],
        "operationId": "getv3_cohorts",
        "summary": "List all cohorts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/cohorts/{id}": {
      "get": {
        "tags": [
          "v3cohorts"
        ],
        "operationId": "getv3_cohorts_id",
        "summary": "Show a cohort",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3cohorts"
        ],
        "operationId": "patchv3_cohorts_id",
        "summary": "Update a cohort",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'cohorts'"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[attributes][name]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/permissions": {
      "post": {
        "tags": [
          "v3permissions"
        ],
        "operationId": "postv3_permissions",
        "summary": "Allows users to create a permission by user_role",
        "parameters": [
          {
            "name": "data[relationships][authorizable][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][authorizable][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][user_role][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][user_role][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be permissions"
          },
          {
            "name": "data[attributes][enabled]",
            "type": "boolean",
            "in": "formData"
          },
          {
            "name": "data[attributes][scope_name]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "get": {
        "tags": [
          "v3permissions"
        ],
        "operationId": "get_v3_permissions",
        "summary": {
          "desc": "All permissions"
        },
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/permissions/{id}": {
      "get": {
        "tags": [
          "v3permissions"
        ],
        "operationId": "get_v3_permissions_id",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of Permission object"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3permissions"
        ],
        "operationId": "patch_v3_permissions_id",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of Permission object"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3permissions"
        ],
        "operationId": "delete_v3_permissions_id",
        "summary": "Destroys Permission by id",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of Permission object"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/filter_groups": {
      "post": {
        "tags": [
          "v3filter_groups"
        ],
        "operationId": "postv3_filter_groups",
        "summary": "Creates a Filter Group.",
        "parameters": [
          {
            "name": "data[attributes][operator]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "either 'and' or 'or'"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'filter_groups'"
          },
          {
            "name": "data[relationships][cohort][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'cohorts'"
          },
          {
            "name": "data[relationships][cohort][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Cohort"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/filter_group/{id}": {
      "delete": {
        "tags": [
          "v3filter_groups"
        ],
        "operationId": "deletev3_filter_group_id",
        "summary": "Destroy a Filter Group",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/allowed_actions": {
      "post": {
        "tags": [
          "v3allowed_actions"
        ],
        "operationId": "postv3_allowed_actions",
        "summary": "Creates a new allowed action",
        "parameters": [
          {
            "name": "data[relationships][permission][data][type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'permission'"
          },
          {
            "name": "data[relationships][permission][data][id]",
            "type": "number",
            "in": "formData",
            "required": true,
            "description": "*Must* be a permission ID"
          },
          {
            "name": "data[attributes][name]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'allowed_actions'"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/allowed_actions/{id}": {
      "delete": {
        "tags": [
          "v3allowed_actions"
        ],
        "operationId": "deletev3_allowed_actions_id",
        "summary": "Removes an allowed action from a permission",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Allowed Action"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/users": {
      "get": {
        "tags": [
          "v3users"
        ],
        "operationId": "getv3_users",
        "summary": "List all scoped Users",
        "parameters": [
          {
            "name": "filters[email]",
            "type": "string",
            "in": "query",
            "description": "The email that the resources must have."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/users/{id}": {
      "get": {
        "tags": [
          "v3users"
        ],
        "operationId": "getv3_users_id",
        "summary": "Show the User resource with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3users"
        ],
        "operationId": "patchv3_users_id",
        "summary": "Updates the User with the supplied ID with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][uid]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested  User"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'users'"
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the requested resource to get/update/destroy only"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][username]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][provider]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][enabled]",
            "type": "boolean",
            "in": "formData",
            "description": "Enables or disables the user, this isn't a required parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3users"
        ],
        "operationId": "delete_v3_users_id",
        "summary": "Destroys the User with the supplied ID if allowed",
        "parameters": [
          {
            "name": "data[attributes][uid]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested User"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'users'"
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the requested resource to get/update/destroy only"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][username]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][provider]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][enabled]",
            "type": "boolean",
            "in": "formData",
            "description": "Enables or disables the user, this isn't a required parameter."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/reports": {
      "post": {
        "tags": [
          "v3reports"
        ],
        "operationId": "postv3_reports",
        "summary": "Export type records (as a csv file)",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be '{record_type}_export'. only 'mobile_user_export' is allowed at the moment."
          },
          {
            "name": "data[attributes][columns]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "formData",
            "description": "List of column header-and-query descriptors."
          },
          {
            "name": "data[attributes][sort]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "formData",
            "description": "List of columns and the desired ordering. Must be presented with the desired lexicographical order."
          },
          {
            "name": "data[attributes][format]",
            "type": "string",
            "in": "formData",
            "description": "Format of the report to generate. Only \"csv\" is currently supported."
          },
          {
            "name": "data[attributes][async]",
            "type": "string",
            "in": "formData",
            "description": "Only \"false\" is supported at the moment"
          },
          {
            "name": "data[attributes][page]",
            "type": "number",
            "in": "formData",
            "description": "The page to display, if a per-page pagination is specified"
          },
          {
            "name": "data[attributes][per_page]",
            "type": "number",
            "in": "formData",
            "description": "The number of records to display in the resulting report. Do not provide one to disable pagination."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/dynamic_content/content_types": {
      "get": {
        "tags": [
          "v3dynamic_contentcontent_types"
        ],
        "operationId": "getv3_dynamic_content_content_types",
        "summary": "List all scoped Dynamic Content/Content Types with attributes",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/dynamic_content/content_types/{id}": {
      "get": {
        "tags": [
          "v3dynamic_contentcontent_types"
        ],
        "operationId": "getv3_dynamic_content_content_types_id",
        "summary": "Show the Content Type resource with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/dynamic_content/contents/{id}": {
      "get": {
        "tags": [
          "v3dynamic_contentcontents"
        ],
        "operationId": "getv3_dynamic_content_contents_id",
        "summary": "Retrieve dynamic_content",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3dynamic_contentcontents"
        ],
        "operationId": "patchv3_dynamic_content_contents_id",
        "summary": "updates a content",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3dynamic_contentcontents"
        ],
        "operationId": "delete_v3_dynamic_content_contents_id",
        "summary": "destroys the a dynamic content with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested content"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/dynamic_content/contents": {
      "get": {
        "tags": [
          "v3dynamic_contentcontents"
        ],
        "operationId": "getv3_dynamic_content_contents",
        "summary": "Retrieve dynamic_contents",
        "parameters": [
          {
            "name": "filters[content_type][permanent_link]",
            "type": "string",
            "in": "query",
            "description": "The type of content type that the contents should belong to."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3dynamic_contentcontents"
        ],
        "operationId": "postv3_dynamic_content_contents",
        "summary": "Create a dynamic_contents",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/consent/documents": {
      "post": {
        "tags": [
          "v3consentdocuments"
        ],
        "operationId": "post_v3_consent_documents",
        "summary": "Creates an Consent Document.",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'consent__documents'"
          },
          {
            "name": "data[relationships][site][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'sites'"
          },
          {
            "name": "data[relationships][site][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Site"
          },
          {
            "name": "data[relationships][agreement_template][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'agreement__templates'"
          },
          {
            "name": "data[relationships][agreement_template][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Agreement template"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/consent/approvers": {
      "post": {
        "tags": [
          "v3consentapprovers"
        ],
        "operationId": "post_v3_consent_approvers",
        "summary": "Creates a consent approver",
        "parameters": [
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][last_name]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][first_name]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'consent_approvers'"
          },
          {
            "name": "data[attributes][password]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][title]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][consent_document][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'consent_documents'"
          },
          {
            "name": "data[relationships][consent_document][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Consent document"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/consent/approvers/{id}": {
      "delete": {
        "tags": [
          "v3consentapprovers"
        ],
        "operationId": "delete_v3_consent_approvers_id",
        "summary": "Destroys the ConsentApprover with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested ConsentApprover"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/authorizables": {
      "get": {
        "tags": [
          "v3authorizables"
        ],
        "operationId": "get_v3_authorizables",
        "summary": "List all authorizable entities.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/ediary/entry_group_statuses": {
      "post": {
        "tags": [
          "v3ediaryentry_group_statuses"
        ],
        "operationId": "postv3_ediary_entry_group_statuses",
        "summary": "Creates an entry_group_status",
        "parameters": [
          {
            "name": "data[relationships][owner][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][owner][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][entry_group][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][entry_group][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][date]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Status date. The format of the parameter is ISO8601"
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][status]",
            "type": "string",
            "in": "formData",
            "description": "status value"
          }
        ],
        "responses": {
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/v3/ediary/entry_groups": {
      "get": {
        "tags": [
          "v3ediaryentry_groups"
        ],
        "operationId": "getv3_ediary_entry_groups",
        "summary": "retrieves ediary entry_groups",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/batching/batches": {
      "get": {
        "tags": [
          "v3batchingbatches"
        ],
        "operationId": "getv3_batching_batches",
        "summary": "List all Batches",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/batching/batches/{id}": {
      "get": {
        "tags": [
          "v3batchingbatches"
        ],
        "operationId": "getv3_batching_batches_id",
        "summary": "Show the Batching/Batch resource with the supplied ID or permalink",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/timezones": {
      "get": {
        "tags": [
          "v3timezones"
        ],
        "operationId": "get_v3_timezones",
        "summary": "List timezones",
        "parameters": [
          {
            "name": "sort",
            "type": "string",
            "enum": [
              "offset",
              "-offset"
            ],
            "in": "query",
            "description": "Timezones in sort direction"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/users/password": {
      "post": {
        "tags": [
          "v3userspasswords"
        ],
        "operationId": "postv3_users_password",
        "summary": "Forgot Password to send the password reset instruction",
        "parameters": [
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be password_resets"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3userspasswords"
        ],
        "operationId": "patchv3_users_password",
        "summary": "Changing password of user",
        "parameters": [
          {
            "name": "data[attributes][password_confirmation]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][password]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][reset_password_token]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be password_resets"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/users/session": {
      "post": {
        "tags": [
          "v3userssessions"
        ],
        "operationId": "postv3_users_session",
        "summary": "Sign In",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'sessions'"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "description": "The mobile user's email address"
          },
          {
            "name": "data[attributes][account_name]",
            "type": "string",
            "in": "formData",
            "description": "The mobile user's account name"
          },
          {
            "name": "data[attributes][password]",
            "type": "string",
            "in": "formData",
            "description": "The mobile user's password"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "get": {
        "tags": [
          "v3userssessions"
        ],
        "operationId": "getv3_users_session",
        "summary": "Status",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/users/sessions": {
      "delete": {
        "tags": [
          "v3userssessions"
        ],
        "operationId": "deletev3_users_sessions",
        "summary": "Sign Out",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/users/invitation": {
      "post": {
        "tags": [
          "v3usersinvitations"
        ],
        "operationId": "postv3_users_invitation",
        "summary": "Create an Invitation",
        "parameters": [
          {
            "name": "data[relationships][user_role][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][user_role][data][type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be user_roles"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be 'invitations'"
          },
          {
            "name": "data[attributes][phone]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][first_name]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][last_name]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][suffix]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][dob]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3usersinvitations"
        ],
        "operationId": "patchv3_users_invitation",
        "summary": "Accept an Invitation",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'invitations'"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "description": "invitee email"
          },
          {
            "name": "data[attributes][invitation_token]",
            "type": "string",
            "in": "formData",
            "description": "The alphanumeric token supplied (usually via email) to the user for invitation to the system."
          },
          {
            "name": "data[attributes][password]",
            "type": "string",
            "in": "formData",
            "description": "The password that will be associated with the user"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users": {
      "patch": {
        "tags": [
          "v3mobile_users"
        ],
        "operationId": "patchv3_mobile_users",
        "summary": "Update a mobile user",
        "parameters": [
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "description": "The user's email address"
          },
          {
            "name": "data[attributes][account_name]",
            "type": "string",
            "in": "formData",
            "description": "Account Name"
          },
          {
            "name": "data[attributes][password]",
            "type": "string",
            "in": "formData",
            "description": "Password"
          },
          {
            "name": "data[attributes][disabled]",
            "type": "boolean",
            "in": "formData",
            "description": "Disable Flag"
          },
          {
            "name": "data[relationships][devices][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'devices'"
          },
          {
            "name": "data[relationships][devices][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The Id of the device you are associating to the mobule user."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/import": {
      "post": {
        "tags": [
          "v3mobile_users"
        ],
        "operationId": "postv3_mobile_users_import",
        "summary": "Import mobile users (via csv file)",
        "parameters": [
          {
            "name": "file",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The field expects an uploaded CSV formated file"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/{id}": {
      "delete": {
        "tags": [
          "v3mobile_users"
        ],
        "operationId": "delete_v3_mobile_users_id",
        "summary": "Destroys the MobileUser with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested MobileUser"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/badges": {
      "get": {
        "tags": [
          "v3badges"
        ],
        "operationId": "get_v3_badges",
        "summary": "List all scoped Rewards",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3badges"
        ],
        "operationId": "post_v3_badges",
        "summary": "Create a new Reward with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][title]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'badge'"
          },
          {
            "name": "data[attributes][description]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][threshold]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[attributes][enabled]",
            "type": "boolean",
            "in": "formData"
          },
          {
            "name": "data[attributes][based_on]",
            "type": "string",
            "enum": [
              "count",
              "time"
            ],
            "in": "formData"
          },
          {
            "name": "data[attributes][trigger]",
            "type": "string",
            "in": "formData",
            "description": "TBD"
          },
          {
            "name": "data[attributes][time_unit]",
            "type": "string",
            "enum": [
              "day",
              "month",
              "year"
            ],
            "in": "formData"
          },
          {
            "name": "data[attributes][start_point]",
            "type": "string",
            "enum": [
              "fixed",
              "event"
            ],
            "in": "formData"
          },
          {
            "name": "data[attributes][start_at]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][image]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][disabled_image]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][brand][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'brands'"
          },
          {
            "name": "data[relationships][brand][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Brand"
          },
          {
            "name": "data[relationships][callback][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'callbacks'"
          },
          {
            "name": "data[relationships][callback][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Callback"
          },
          {
            "name": "data[relationships][points_records][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'points_records'"
          },
          {
            "name": "data[relationships][points_records][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Points records"
          },
          {
            "name": "data[relationships][schedules][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'schedules'"
          },
          {
            "name": "data[relationships][schedules][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Schedules"
          },
          {
            "name": "data[relationships][taggings][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'taggings'"
          },
          {
            "name": "data[relationships][taggings][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Taggings"
          },
          {
            "name": "data[relationships][tag][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'tags'"
          },
          {
            "name": "data[relationships][tag][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Tag"
          },
          {
            "name": "data[relationships][segmentations][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'segmentations'"
          },
          {
            "name": "data[relationships][segmentations][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Segmentations"
          },
          {
            "name": "data[relationships][reward_earnings][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'reward_earnings'"
          },
          {
            "name": "data[relationships][reward_earnings][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Reward earnings"
          },
          {
            "name": "data[relationships][accessible][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'accessibles'"
          },
          {
            "name": "data[relationships][accessible][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Accessible"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/badges/{id}": {
      "get": {
        "tags": [
          "v3badges"
        ],
        "operationId": "get_v3_badges_id",
        "summary": "Show the Reward resource with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3badges"
        ],
        "operationId": "patch_v3_badges_id",
        "summary": "Updates the Reward with the supplied ID with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][title]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'badge'"
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested  Reward"
          },
          {
            "name": "data[attributes][description]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][threshold]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[attributes][enabled]",
            "type": "boolean",
            "in": "formData"
          },
          {
            "name": "data[attributes][based_on]",
            "type": "string",
            "enum": [
              "count",
              "time"
            ],
            "in": "formData"
          },
          {
            "name": "data[attributes][trigger]",
            "type": "string",
            "in": "formData",
            "description": "TBD"
          },
          {
            "name": "data[attributes][time_unit]",
            "type": "string",
            "enum": [
              "day",
              "month",
              "year"
            ],
            "in": "formData"
          },
          {
            "name": "data[attributes][start_point]",
            "type": "string",
            "enum": [
              "fixed",
              "event"
            ],
            "in": "formData"
          },
          {
            "name": "data[attributes][start_at]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][image]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][disabled_image]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][brand][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'brands'"
          },
          {
            "name": "data[relationships][brand][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Brand"
          },
          {
            "name": "data[relationships][callback][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'callbacks'"
          },
          {
            "name": "data[relationships][callback][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Callback"
          },
          {
            "name": "data[relationships][points_records][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'points_records'"
          },
          {
            "name": "data[relationships][points_records][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Points records"
          },
          {
            "name": "data[relationships][schedules][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'schedules'"
          },
          {
            "name": "data[relationships][schedules][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Schedules"
          },
          {
            "name": "data[relationships][taggings][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'taggings'"
          },
          {
            "name": "data[relationships][taggings][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Taggings"
          },
          {
            "name": "data[relationships][tag][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'tags'"
          },
          {
            "name": "data[relationships][tag][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Tag"
          },
          {
            "name": "data[relationships][segmentations][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'segmentations'"
          },
          {
            "name": "data[relationships][segmentations][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Segmentations"
          },
          {
            "name": "data[relationships][reward_earnings][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'reward_earnings'"
          },
          {
            "name": "data[relationships][reward_earnings][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Reward earnings"
          },
          {
            "name": "data[relationships][accessible][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'accessibles'"
          },
          {
            "name": "data[relationships][accessible][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Accessible"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3badges"
        ],
        "operationId": "delete_v3_badges_id",
        "summary": "Destroys the Reward with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Reward"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/dynamic_content/content/{id}/model_translations": {
      "get": {
        "tags": [
          "v3relationshipsmodel_translations"
        ],
        "operationId": "getv3_dynamic_content_content_id_model_translations",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[id]",
            "type": "string",
            "in": "query"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "query",
            "description": "Must be 'model_translations'"
          },
          {
            "name": "data[attributes][field]",
            "type": "string",
            "in": "query",
            "description": "Field that is translated"
          },
          {
            "name": "data[attributes][iso]",
            "type": "string",
            "in": "query",
            "description": "Iso that identifies the language"
          },
          {
            "name": "data[attributes][value]",
            "type": "string",
            "in": "query",
            "description": "Translation"
          },
          {
            "name": "data[relationships][record][data][type]",
            "type": "string",
            "in": "query",
            "description": "The type of record that is being translated"
          },
          {
            "name": "data[relationships][record][data][id]",
            "type": "number",
            "in": "query",
            "description": "The id of the record that is being translated"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/data_collection/flow_processes/{flow_process_id}": {
      "post": {
        "tags": [
          "v3relationshipscalculations"
        ],
        "operationId": "post_v3_data_collection_flow_processes_flow_process_id",
        "summary": "Create a Calculation with the supplied attributes",
        "parameters": [
          {
            "name": "flow_process_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/{mobile_user_id}/related_users?filter": {
      "get": {
        "tags": [
          "v3relationshipsrelated_users"
        ],
        "operationId": "get_v3_mobile_users_mobile_user_id_related_users?filter",
        "summary": "List all RelatedUsers of a given MobileUser",
        "parameters": [
          {
            "name": "mobile_user_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested MobileUser"
          },
          {
            "name": "filter",
            "type": "string",
            "in": "query",
            "description": "The type of relationship to filter by, can be one of \"following\", \"followers\""
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/user_roles/{user_role_id}/invitable_user_roles": {
      "get": {
        "tags": [
          "v3relationshipsinvitable_user_roles"
        ],
        "operationId": "get_v3_user_roles_user_role_id_invitable_user_roles",
        "summary": "List all invitable user roles from queried user role",
        "parameters": [
          {
            "name": "user_role_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "ID of requested user role, placed in url path."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/geofences/{geofence_id}/locations": {
      "post": {
        "tags": [
          "v3relationshipslocations"
        ],
        "operationId": "postv3_geofences_geofence_id_locations",
        "summary": "Create a new Location with the supplied attributes for specified geofence",
        "parameters": [
          {
            "name": "data[attributes][title]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "title"
          },
          {
            "name": "geofence_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'locations'"
          },
          {
            "name": "data[attributes][address_line_1]",
            "type": "string",
            "in": "formData",
            "description": "Address line 1"
          },
          {
            "name": "data[attributes][address_line_2]",
            "type": "string",
            "in": "formData",
            "description": "Address line 2"
          },
          {
            "name": "data[attributes][address_line_3]",
            "type": "string",
            "in": "formData",
            "description": "Address line 3"
          },
          {
            "name": "data[attributes][city]",
            "type": "string",
            "in": "formData",
            "description": "City"
          },
          {
            "name": "data[attributes][state]",
            "type": "string",
            "in": "formData",
            "description": "State"
          },
          {
            "name": "data[attributes][country]",
            "type": "string",
            "in": "formData",
            "description": "Country"
          },
          {
            "name": "data[attributes][zip_code]",
            "type": "string",
            "in": "formData",
            "description": "Zip Code"
          },
          {
            "name": "data[attributes][localizable_id]",
            "type": "string",
            "in": "formData",
            "description": "Zip Code"
          },
          {
            "name": "data[attributes][localizable_type]",
            "type": "string",
            "in": "formData",
            "description": "Zip Code"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/geofences/{geofence_id}/location/{id}": {
      "delete": {
        "tags": [
          "v3relationshipslocations"
        ],
        "operationId": "deletev3_geofences_geofence_id_location_id",
        "summary": "delete a given location",
        "parameters": [
          {
            "name": "geofence_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the specific geofence location ID"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/ediary/entries/{id}/data_collection/flow_process_values": {
      "post": {
        "tags": [
          "v3relationshipsdata_collectionflow_process_values"
        ],
        "operationId": "postv3_ediary_entries_id_data_collection_flow_process_values",
        "summary": "creates captured_values for a given parent record",
        "parameters": [
          {
            "name": "data[relationships][owner][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][owner][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][flow_process][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][flow_process][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][input_value]",
            "type": "number",
            "in": "formData",
            "required": true,
            "description": "key is the input_id and value is the answer"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][captured_value_group][data][type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][captured_value_group][data][id]",
            "type": "number",
            "in": "formData"
          }
        ],
        "responses": {
          "": {
            "description": ""
          }
        }
      }
    },
    "/v3/{resource}/{resource_id}/data_collection/captured_value_groups": {
      "get": {
        "tags": [
          "v3relationshipsdata_collectioncaptured_value_groups"
        ],
        "operationId": "getv3_resource_resource_id_data_collection_captured_value_groups",
        "summary": "renders all captured value groups for a given resource.",
        "parameters": [
          {
            "name": "resource_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "resource",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/{resource}/{resource_id}/data_collection/captured_value_groups/{id}": {
      "get": {
        "tags": [
          "v3relationshipsdata_collectioncaptured_value_groups"
        ],
        "operationId": "getv3_resource_resource_id_data_collection_captured_value_groups_id",
        "summary": "renders a captured value group given it's ID",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "resource_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "resource",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3relationshipsdata_collectioncaptured_value_groups"
        ],
        "operationId": "delete_v3_resource_resource_id_data_collection_captured_value_groups_id",
        "summary": "Soft-deletes/Hides the CapturedValueGroup with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "resource_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "resource",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/{mobile_user_id}/reminder_events": {
      "get": {
        "tags": [
          "v3relationshipsreminder_events"
        ],
        "operationId": "get_v3_mobile_users_mobile_user_id_reminder_events",
        "summary": "List all Reminder::Events for a given MobileUser",
        "parameters": [
          {
            "name": "mobile_user_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Mobile User"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3relationshipsreminder_events"
        ],
        "operationId": "post_v3_mobile_users_mobile_user_id_reminder_events",
        "summary": "Create a Reminder::Event for a given MobileUser",
        "parameters": [
          {
            "name": "data[attributes][date]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "mobile_user_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'reminder__events'"
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the requested resource to get/update/destroy only"
          },
          {
            "name": "data[attributes][status]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[attributes][extras][title]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][extras][site]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][rule][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'reminder__rules'"
          },
          {
            "name": "data[relationships][rule][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Rule"
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Mobile user"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/{mobile_user_id}/reminder_events/{id}": {
      "get": {
        "tags": [
          "v3relationshipsreminder_events"
        ],
        "operationId": "get_v3_mobile_users_mobile_user_id_reminder_events_id",
        "summary": "Show a Reminder:::Event for a given MobileUser",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of a given Reminder::Event"
          },
          {
            "name": "mobile_user_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Mobile User"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3relationshipsreminder_events"
        ],
        "operationId": "patch_v3_mobile_users_mobile_user_id_reminder_events_id",
        "summary": "Update a given Reminder::Event for a given MobileUser",
        "parameters": [
          {
            "name": "data[attributes][date]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of a given Reminder::Event"
          },
          {
            "name": "mobile_user_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested MobileUser"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'reminder__events'"
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the requested resource to get/update/destroy only"
          },
          {
            "name": "data[attributes][status]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[attributes][extras][title]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][extras][site]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][rule][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'reminder__rules'"
          },
          {
            "name": "data[relationships][rule][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Rule"
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Mobile user"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3relationshipsreminder_events"
        ],
        "operationId": "delete_v3_mobile_users_mobile_user_id_reminder_events_id",
        "summary": "Delete a given Reminder::Event from a given MobileUser",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of a given Reminder::Event"
          },
          {
            "name": "mobile_user_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of a given MobileUser"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/{id}/scheduler/personalized_rule_schedules": {
      "get": {
        "tags": [
          "v3relationshipsschedulerpersonalized_rule_schedules"
        ],
        "operationId": "getv3_mobile_users_id_scheduler_personalized_rule_schedules",
        "summary": "Retrieve PersonalizedRuleSchedules for the given MobileUser",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[attributes][start_date]",
            "type": "string",
            "in": "query"
          },
          {
            "name": "data[attributes][end_date]",
            "type": "string",
            "in": "query"
          },
          {
            "name": "data[attributes][time]",
            "type": "string",
            "in": "query",
            "description": "Must be military format with dd:dd"
          },
          {
            "name": "data[attributes][relative_schedule]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "description": "In combination with the relative_unit, determines the schedule\n              starting from the start date in which the scheduleable will occur. Example:\n              relative_schedule = [1 ,5, 10], relative_unit = days means that day 1, day 5 and day 10 the\n              scheduleable will be triggered"
          },
          {
            "name": "data[attributes][relative_unit]",
            "type": "string",
            "in": "query",
            "description": "Must be: days, weeks, months"
          },
          {
            "name": "data[attributes][enabled]",
            "type": "boolean",
            "in": "query",
            "description": "Whether the schedule must be active for the user"
          },
          {
            "name": "data[relationships][scheduleable][data][type]",
            "type": "string",
            "in": "query",
            "description": "Must be 'reminder__rules, eDiary__entry_groups'"
          },
          {
            "name": "data[relationships][scheduleable][data][id]",
            "type": "number",
            "in": "query",
            "description": "The ID of the related Scheduleable"
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "query",
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "query",
            "description": "The ID of the related Mobile user"
          }
        ],
        "responses": {
          "": {
            "description": ""
          }
        }
      },
      "post": {
        "tags": [
          "v3relationshipsschedulerpersonalized_rule_schedules"
        ],
        "operationId": "postv3_mobile_users_id_scheduler_personalized_rule_schedules",
        "summary": "Create PersonalizedRuleSchedule for given MobileUser",
        "parameters": [
          {
            "name": "data[relationships][personalized_scheduleable][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][personalized_scheduleable][data][type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "type of scheduleable object, ie: 'reminder__rules'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be 'scheduler__personalized_rule_schedules'"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData",
            "description": "Only required for update action"
          },
          {
            "name": "data[attributes][start_date]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][end_date]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][time]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][timezone]",
            "type": "string",
            "in": "formData",
            "description": "personalized timezone for the rule schedule"
          },
          {
            "name": "data[attributes][relative_schedule]",
            "type": "string",
            "in": "formData",
            "description": "sets the relative schedule of the rule, utilizing the relative_unit"
          },
          {
            "name": "data[attributes][days_of_week]",
            "type": "string",
            "in": "formData",
            "description": "days that the rule should not apply, ie: holidays"
          },
          {
            "name": "data[attributes][relative_unit]",
            "type": "string",
            "in": "formData",
            "description": "used with relative_schedule, ie: day or week"
          },
          {
            "name": "data[attributes][start_date_offset]",
            "type": "number",
            "in": "formData",
            "description": "number of units from the start_date"
          },
          {
            "name": "data[attributes][start_date_offset_unit]",
            "type": "string",
            "in": "formData",
            "description": "unit used by start_date_offset, ie: day"
          },
          {
            "name": "data[attributes][exception_days]",
            "type": "string",
            "in": "formData",
            "description": "days that the rule should not apply, ie: holidays"
          },
          {
            "name": "data[attributes][skip_exceptions]",
            "type": "boolean",
            "in": "formData",
            "description": "Flag to skip exception days"
          },
          {
            "name": "data[attributes][active_time_start]",
            "type": "string",
            "in": "formData",
            "description": "active start time for the rule"
          },
          {
            "name": "data[attributes][active_time_end]",
            "type": "string",
            "in": "formData",
            "description": "active end time for the rule"
          },
          {
            "name": "data[attributes][enabled]",
            "type": "boolean",
            "in": "formData",
            "description": "Flag that must be sent when the information collected"
          }
        ],
        "responses": {
          "": {
            "description": ""
          }
        }
      }
    },
    "/v3/mobile_users/{mobile_user_id}/scheduler/personalized_rule_schedules/{id}": {
      "patch": {
        "tags": [
          "v3relationshipsschedulerpersonalized_rule_schedules"
        ],
        "operationId": "patchv3_mobile_users_mobile_user_id_scheduler_personalized_rule_schedules_id",
        "summary": "Updates given PersonalizedRuleSchedule",
        "parameters": [
          {
            "name": "data[relationships][personalized_scheduleable][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][personalized_scheduleable][data][type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "type of scheduleable object, ie: 'reminder__rules'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be 'scheduler__personalized_rule_schedules'"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "mobile_user_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData",
            "description": "Only required for update action"
          },
          {
            "name": "data[attributes][start_date]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][end_date]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][time]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][timezone]",
            "type": "string",
            "in": "formData",
            "description": "personalized timezone for the rule schedule"
          },
          {
            "name": "data[attributes][relative_schedule]",
            "type": "string",
            "in": "formData",
            "description": "sets the relative schedule of the rule, utilizing the relative_unit"
          },
          {
            "name": "data[attributes][days_of_week]",
            "type": "string",
            "in": "formData",
            "description": "days that the rule should not apply, ie: holidays"
          },
          {
            "name": "data[attributes][relative_unit]",
            "type": "string",
            "in": "formData",
            "description": "used with relative_schedule, ie: day or week"
          },
          {
            "name": "data[attributes][start_date_offset]",
            "type": "number",
            "in": "formData",
            "description": "number of units from the start_date"
          },
          {
            "name": "data[attributes][start_date_offset_unit]",
            "type": "string",
            "in": "formData",
            "description": "unit used by start_date_offset, ie: day"
          },
          {
            "name": "data[attributes][exception_days]",
            "type": "string",
            "in": "formData",
            "description": "days that the rule should not apply, ie: holidays"
          },
          {
            "name": "data[attributes][skip_exceptions]",
            "type": "boolean",
            "in": "formData",
            "description": "Flag to skip exception days"
          },
          {
            "name": "data[attributes][active_time_start]",
            "type": "string",
            "in": "formData",
            "description": "active start time for the rule"
          },
          {
            "name": "data[attributes][active_time_end]",
            "type": "string",
            "in": "formData",
            "description": "active end time for the rule"
          },
          {
            "name": "data[attributes][enabled]",
            "type": "boolean",
            "in": "formData",
            "description": "Flag that must be sent when the information collected"
          }
        ],
        "responses": {
          "": {
            "description": ""
          }
        }
      }
    },
    "/v3/{user_type}/{user_type_id}/invitation/resend": {
      "post": {
        "tags": [
          "v3relationshipsresend_invitation"
        ],
        "operationId": "postv3_user_type_user_type_id_invitation_resend",
        "summary": "Resend an Invitation",
        "parameters": [
          {
            "name": "data[attributes][user_id]",
            "type": "number",
            "in": "formData",
            "required": true,
            "description": "The user id used to resend the invitation"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be 'invitations'"
          },
          {
            "name": "user_type_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "user_type",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/{mobile_user_id}/profile": {
      "get": {
        "tags": [
          "v3relationshipsprofiles"
        ],
        "operationId": "getv3_mobile_users_mobile_user_id_profile",
        "summary": "Show the profile for the given user",
        "parameters": [
          {
            "name": "mobile_user_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the specific Mobile User ID"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3relationshipsprofiles"
        ],
        "operationId": "patchv3_mobile_users_mobile_user_id_profile",
        "summary": "Update a specific profile",
        "parameters": [
          {
            "name": "mobile_user_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the specific Mobile User ID"
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][first_name]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][middle_initial]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][last_name]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][prefix]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][suffix]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][gender]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][ethnicity]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][occupation]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][avatar]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][username]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][dob]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][timezone]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][phone]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][age]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][profileable][data][id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[relationships][profileable][data][type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[relationships][language][data][id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[relationships][language][data][type]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/{resource}/likes": {
      "get": {
        "tags": [
          "v3relationshipslikes"
        ],
        "operationId": "get_v3_resource_likes",
        "summary": "List all scoped Likes",
        "parameters": [
          {
            "name": "resource",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "The :resource is the api resource being liked. Only certain resources are likeable."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3relationshipslikes"
        ],
        "operationId": "post_v3_resource_likes",
        "summary": "Create a new Like relationship",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be 'likes'"
          },
          {
            "name": "resource",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "The :resource is the api resource being liked. Only certain resources are likeable."
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Mobile user"
          },
          {
            "name": "data[relationships][likeable][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'likeables'"
          },
          {
            "name": "data[relationships][likeable][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Likeable"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/{resource}/likes/{id}": {
      "get": {
        "tags": [
          "v3relationshipslikes"
        ],
        "operationId": "get_v3_resource_likes_id",
        "summary": "Show the Like relationship with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          },
          {
            "name": "resource",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "The :resource is the api resource being liked. Only certain resources are likeable."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3relationshipslikes"
        ],
        "operationId": "delete_v3_resource_likes_id",
        "summary": "Destroys/Removes the Like relationship with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Like"
          },
          {
            "name": "resource",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "The :resource is the api resource being liked. Only certain resources are likeable."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/user_roles/{user_role_id}/permissions": {
      "get": {
        "tags": [
          "v3relationshipspermissions"
        ],
        "operationId": "getv3_user_roles_user_role_id_permissions",
        "summary": "List all permissions scoped by requested user role",
        "parameters": [
          {
            "name": "user_role_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/{mobile_user_id}/dynamic_content/contents": {
      "get": {
        "tags": [
          "v3relationshipsdynamic_contentcontents"
        ],
        "operationId": "getv3_mobile_users_mobile_user_id_dynamic_content_contents",
        "summary": "retrieve dynamic_contents",
        "parameters": [
          {
            "name": "mobile_user_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/dynamic_content/content_types/{content_type_id}/dynamic_content/attribute_keys": {
      "get": {
        "tags": [
          "v3relationshipsdynamic_contentattribute_keys"
        ],
        "operationId": "getv3_dynamic_content_content_types_content_type_id_dynamic_content_attribute_keys",
        "summary": "List all scoped attributes for the Content Type",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "query",
            "required": true,
            "description": "The ID of the requested resource"
          },
          {
            "name": "content_type_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/{id}/ediary/entry_group_statuses": {
      "get": {
        "tags": [
          "v3relationshipsediaryentry_group_statuses"
        ],
        "operationId": "getv3_mobile_users_id_ediary_entry_group_statuses",
        "summary": "Returns overall status for each entry_group",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/{id}/ediary/entries": {
      "get": {
        "tags": [
          "v3relationshipsediaryentries"
        ],
        "operationId": "getv3_mobile_users_id_ediary_entries",
        "summary": {
          "desc": "retrieves ediary entries for a given mobile_user, sorted by date descending"
        },
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3relationshipsediaryentries"
        ],
        "operationId": "postv3_mobile_users_id_ediary_entries",
        "summary": "creates ediary entries for a given mobile_user",
        "parameters": [
          {
            "name": "data[relationships][template][data][id]",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[relationships][template][data][type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][date]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "": {
            "description": ""
          }
        }
      }
    },
    "/v3/mobile_users/{mobile_user_id}/ediary/entries/{id}": {
      "patch": {
        "tags": [
          "v3relationshipsediaryentries"
        ],
        "operationId": "patchv3_mobile_users_mobile_user_id_ediary_entries_id",
        "summary": "updates ediary entries for a given mobile_user",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "mobile_user_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][date]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][locked]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "": {
            "description": ""
          }
        }
      }
    },
    "/v3/ediary/entry_groups/{id}/ediary/entry_templates": {
      "get": {
        "tags": [
          "v3relationshipsediaryentry_templates"
        ],
        "operationId": "getv3_ediary_entry_groups_id_ediary_entry_templates",
        "summary": "Retrieves ediary entry_templates",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/batching/batches/{batch_id}/selections/{id}": {
      "patch": {
        "tags": [
          "v3relationshipsbatchingselections"
        ],
        "operationId": "patch_v3_batching_batches_batch_id_selections_id",
        "summary": "Updates the Batching::Selection with the supplied ID with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][status]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The status to transition the resource to. Must be one of [\"pending\", \"completed\", \"in_progress\"]"
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Batching::Selection"
          },
          {
            "name": "batch_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "The permalink for the parent Batching::Batch"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'batching__selections'"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/resource/{resource_id}/sites": {
      "get": {
        "tags": [
          "v3relationshipssites"
        ],
        "operationId": "getv3_resource_resource_id_sites",
        "summary": "Lists all Sites",
        "parameters": [
          {
            "name": "resource_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/trials/sites/{site_id}/site_users": {
      "get": {
        "tags": [
          "v3relationshipssite_users"
        ],
        "operationId": "getv3_trials_sites_site_id_site_users",
        "summary": "List all scoped Users for a given Trials::Site",
        "parameters": [
          {
            "name": "model_name",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "Must be 'Trials::Site'"
          },
          {
            "name": "site_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Trials::Site"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3relationshipssite_users"
        ],
        "operationId": "postv3_trials_sites_site_id_site_users",
        "summary": "Create a new TrialsSitesUsers with the supplied attributes",
        "parameters": [
          {
            "name": "model_name",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be 'Trials::Site'"
          },
          {
            "name": "site_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Trials::Site"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'trials__sites_users'"
          },
          {
            "name": "data[attributes][user_id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[relationships][user][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'users'"
          },
          {
            "name": "data[relationships][user][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related User"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/trials/sites/{site_id}/site_users/{id}": {
      "get": {
        "tags": [
          "v3relationshipssite_users"
        ],
        "operationId": "getv3_trials_sites_site_id_site_users_id",
        "summary": "Show a requested TrialsSitesUsers resource for a given Trials::Site",
        "parameters": [
          {
            "name": "model_name",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "Must be 'Trials::Site'"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "A composite ID. Must be Trials::Site#id and User#id joined by an underscore, e.g. 1_10"
          },
          {
            "name": "site_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Trials::Site"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/trials/sites/{site_id}/site_members": {
      "get": {
        "tags": [
          "v3relationshipssite_members"
        ],
        "operationId": "get_v3_trials_sites_site_id_site_members",
        "summary": "List all SiteMembers scoped to a given CrTrials::Site",
        "parameters": [
          {
            "name": "site_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the Site to scope resources by"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3relationshipssite_members"
        ],
        "operationId": "post_v3_trials_sites_site_id_site_members",
        "summary": "Create a new SiteMember relationship with the supplied attributes",
        "parameters": [
          {
            "name": "site_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the CrTrials::Site to scope resources by"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'trials__site_members'"
          },
          {
            "name": "data[member_type]",
            "type": "string",
            "in": "formData",
            "description": "The type of member for the site. Can be one of: patient, pi, mrn"
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Mobile user"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/trials/sites/{site_id}/site_members/{id}": {
      "get": {
        "tags": [
          "v3relationshipssite_members"
        ],
        "operationId": "get_v3_trials_sites_site_id_site_members_id",
        "summary": "Show the SiteMember resource with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          },
          {
            "name": "site_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the CrTrials::Site to scope resources by"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/relationships/evaluations/{id}/evaluation_result": {
      "post": {
        "tags": [
          "v3relationshipsevaluation_results"
        ],
        "operationId": "post_v3_relationships_evaluations_id_evaluation_result",
        "summary": "Create a new Evaluation Result with the supplied arguments",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "permanent_link",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/{mobile_user_id}/badges": {
      "get": {
        "tags": [
          "v3relationshipsbadges"
        ],
        "operationId": "get_v3_mobile_users_mobile_user_id_badges",
        "summary": "List all Awarded Badges of the given Mobile User",
        "parameters": [
          {
            "name": "mobile_user_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Mobile User"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3relationshipsbadges"
        ],
        "operationId": "post_v3_mobile_users_mobile_user_id_badges",
        "summary": "Create a new Badge with the supplied attributes",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'awarded_badges'"
          },
          {
            "name": "mobile_user_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Mobile User"
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Mobile user"
          },
          {
            "name": "data[relationships][reward][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'rewards'"
          },
          {
            "name": "data[relationships][reward][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Reward"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/mobile_users/{mobile_user_id}/badges/{id}": {
      "get": {
        "tags": [
          "v3relationshipsbadges"
        ],
        "operationId": "get_v3_mobile_users_mobile_user_id_badges_id",
        "summary": "Show the Awarded Badge with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Awarded Badge"
          },
          {
            "name": "mobile_user_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Mobile User"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3relationshipsbadges"
        ],
        "operationId": "patch_v3_mobile_users_mobile_user_id_badges_id",
        "summary": "Updates the Awarded Badge with the supplied attributes",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'awarded_badges'"
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Badge"
          },
          {
            "name": "mobile_user_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Mobile User"
          },
          {
            "name": "data[relationships][mobile_user][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'mobile_users'"
          },
          {
            "name": "data[relationships][mobile_user][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Mobile user"
          },
          {
            "name": "data[relationships][reward][data][type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'rewards'"
          },
          {
            "name": "data[relationships][reward][data][id]",
            "type": "number",
            "in": "formData",
            "description": "The ID of the related Reward"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3relationshipsbadges"
        ],
        "operationId": "delete_v3_mobile_users_mobile_user_id_badges_id",
        "summary": "Destroys the Awarded Badge with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Badge"
          },
          {
            "name": "mobile_user_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Mobile User"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/{commentable_type}/{commentable_id}/discuss/threads": {
      "get": {
        "tags": [
          "v3relationshipsdiscussthreads"
        ],
        "operationId": "getv3_commentable_type_commentable_id_discuss_threads",
        "summary": {
          "desc": "retrieves thread statuses for the given commentable"
        },
        "parameters": [
          {
            "name": "commentable_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "commentable_type",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/{resource}/{resource_id}/notifications/deliveries": {
      "get": {
        "tags": [
          "v3relationshipsnotificationsdeliveries"
        ],
        "operationId": "getv3_resource_resource_id_notifications_deliveries",
        "summary": "retrieves all the notification deliveries for the given user",
        "parameters": [
          {
            "name": "resource_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "resource",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/{resource}/{resource_id}/notifications/deliveries/{id}": {
      "get": {
        "tags": [
          "v3relationshipsnotificationsdeliveries"
        ],
        "operationId": "getv3_resource_resource_id_notifications_deliveries_id",
        "summary": "retrieves a notification delivery for a given user.",
        "parameters": [
          {
            "name": "resource_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "resource",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the Notification Delivery that you want to see."
          },
          {
            "name": "resoruce_id",
            "type": "number",
            "in": "query",
            "description": "The ID of the resource. (User/MobileUser)"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3relationshipsnotificationsdeliveries"
        ],
        "operationId": "patchv3_resource_resource_id_notifications_deliveries_id",
        "summary": "updates a notification delivery for a given user.",
        "parameters": [
          {
            "name": "resource",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the Notification Delivery that you want to update."
          },
          {
            "name": "resource_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the resource. (User/MobileUser)"
          },
          {
            "name": "data[status]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/discuss/thread/{thread_id}/comments": {
      "get": {
        "tags": [
          "v3discusscomments"
        ],
        "operationId": "getv3_discuss_thread_thread_id_comments",
        "summary": "All comments in :Thread:",
        "parameters": [
          {
            "name": "thread_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/discuss/threads/{thread_id}/comments": {
      "post": {
        "tags": [
          "v3discusscomments"
        ],
        "operationId": "postv3_discuss_threads_thread_id_comments",
        "summary": "Create comment in :Thread:",
        "parameters": [
          {
            "name": "thread_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'comments'"
          },
          {
            "name": "data[attributes][body]",
            "type": "string",
            "in": "formData",
            "description": "The body of the comment"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/discuss/threads/{thread_id}/comments/{id}": {
      "get": {
        "tags": [
          "v3discusscomments"
        ],
        "operationId": "getv3_discuss_threads_thread_id_comments_id",
        "summary": "Show :Comment: in :Thread:",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "thread_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/discuss/threads": {
      "get": {
        "tags": [
          "v3discussthreads"
        ],
        "operationId": "getv3_discuss_threads",
        "summary": "Show All Threads, with filtering",
        "parameters": [
          {
            "name": "filters[commentable_type]",
            "type": "string",
            "in": "query"
          },
          {
            "name": "filters[commentable_id]",
            "type": "number",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3discussthreads"
        ],
        "operationId": "postv3_discuss_threads",
        "summary": "Create a new Thread",
        "parameters": [
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'threads'"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/discuss/threads/{thread_id}": {
      "patch": {
        "tags": [
          "v3discussthreads"
        ],
        "operationId": "patchv3_discuss_threads_thread_id",
        "summary": "Update a Thread",
        "parameters": [
          {
            "name": "thread_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'threads'"
          },
          {
            "name": "data[attributes][status]",
            "type": "string",
            "in": "formData",
            "description": "The status of the Thread, on of: [open, resolved]"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/discuss/threads/{id}": {
      "get": {
        "tags": [
          "v3discussthreads"
        ],
        "operationId": "getv3_discuss_threads_id",
        "summary": "Show a specific thread",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the thread"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/geofences": {
      "get": {
        "tags": [
          "v3geofences"
        ],
        "operationId": "getv3_geofences",
        "summary": "List all scoped Geofences",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3geofences"
        ],
        "operationId": "postv3_geofences",
        "summary": "Create a new Geofence with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][permanent_link]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "permanent link"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'geofences'"
          },
          {
            "name": "data[attributes][radius_enabled]",
            "type": "boolean",
            "in": "formData",
            "description": "Enable Radius Geofence"
          },
          {
            "name": "data[attributes][radius]",
            "type": "number",
            "in": "formData",
            "description": "Radius value, required when radius_enabled is true"
          },
          {
            "name": "data[attributes][box_enabled]",
            "type": "boolean",
            "in": "formData",
            "description": "Enable Box Geofence"
          },
          {
            "name": "data[attributes][sw_latitude]",
            "type": "number",
            "in": "formData",
            "description": "sw latitude"
          },
          {
            "name": "data[attributes][sw_longitude]",
            "type": "number",
            "in": "formData",
            "description": "sw longitude"
          },
          {
            "name": "data[attributes][ne_latitude]",
            "type": "number",
            "in": "formData",
            "description": "ne latitude"
          },
          {
            "name": "data[attributes][ne_longitude]",
            "type": "number",
            "in": "formData",
            "description": "ne longitude"
          },
          {
            "name": "data[attributes][zoom]",
            "type": "number",
            "in": "formData",
            "description": "zoom"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/geofences/{id}": {
      "get": {
        "tags": [
          "v3geofences"
        ],
        "operationId": "getv3_geofences_id",
        "summary": "Show the Geofence resource with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3geofences"
        ],
        "operationId": "patchv3_geofences_id",
        "summary": "Updates the Geofence with the supplied ID with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][permanent_link]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "permanent link"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "description": "Must be 'geofences'"
          },
          {
            "name": "data[attributes][radius_enabled]",
            "type": "boolean",
            "in": "formData",
            "description": "Enable Radius Geofence"
          },
          {
            "name": "data[attributes][radius]",
            "type": "number",
            "in": "formData",
            "description": "Radius value, required when radius_enabled is true"
          },
          {
            "name": "data[attributes][box_enabled]",
            "type": "boolean",
            "in": "formData",
            "description": "Enable Box Geofence"
          },
          {
            "name": "data[attributes][sw_latitude]",
            "type": "number",
            "in": "formData",
            "description": "sw latitude"
          },
          {
            "name": "data[attributes][sw_longitude]",
            "type": "number",
            "in": "formData",
            "description": "sw longitude"
          },
          {
            "name": "data[attributes][ne_latitude]",
            "type": "number",
            "in": "formData",
            "description": "ne latitude"
          },
          {
            "name": "data[attributes][ne_longitude]",
            "type": "number",
            "in": "formData",
            "description": "ne longitude"
          },
          {
            "name": "data[attributes][zoom]",
            "type": "number",
            "in": "formData",
            "description": "zoom"
          },
          {
            "name": "data[relationships][locations][data]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3geofences"
        ],
        "operationId": "deletev3_geofences_id",
        "summary": "Destroys the Geofence with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Geofence"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/menus": {
      "get": {
        "tags": [
          "v3menus"
        ],
        "operationId": "getv3_menus",
        "summary": "List all scoped Menus",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3menus"
        ],
        "operationId": "postv3_menus",
        "summary": "Create a new Menu with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][title]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'menus'"
          },
          {
            "name": "data[attributes][icon]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][position]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[attributes][enabled]",
            "type": "boolean",
            "in": "formData"
          },
          {
            "name": "data[attributes][url]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][authorizable_type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][authorizable_id]",
            "type": "number",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/menus/{id}": {
      "get": {
        "tags": [
          "v3menus"
        ],
        "operationId": "getv3_menus_id",
        "summary": "Show the Menu resource with the supplied ID",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested resource"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "v3menus"
        ],
        "operationId": "patchv3_menus_id",
        "summary": "Updates the Menu with the supplied ID with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][title]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "*Must* be 'menus'"
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested  Menu"
          },
          {
            "name": "data[attributes][icon]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][position]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[attributes][enabled]",
            "type": "boolean",
            "in": "formData"
          },
          {
            "name": "data[attributes][url]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][authorizable_type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][authorizable_id]",
            "type": "number",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3menus"
        ],
        "operationId": "deletev3_menus_id",
        "summary": "Destroys the Menu with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Menu"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/languages": {
      "get": {
        "tags": [
          "v3languages"
        ],
        "operationId": "getv3_languages",
        "summary": "List all Languages",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "v3languages"
        ],
        "operationId": "postv3_languages",
        "summary": "Add a new language with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][name]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][iso]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be 'languages'"
          },
          {
            "name": "data[attributes][is_default]",
            "type": "boolean",
            "in": "formData"
          },
          {
            "name": "data[attributes][image]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/languages/{id}": {
      "patch": {
        "tags": [
          "v3languages"
        ],
        "operationId": "patchv3_languages_id",
        "summary": "Updates the Language with the supplied ID with the supplied attributes",
        "parameters": [
          {
            "name": "data[attributes][name]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][iso]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Must be 'languages'"
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Language"
          },
          {
            "name": "data[attributes][is_default]",
            "type": "boolean",
            "in": "formData"
          },
          {
            "name": "data[attributes][image]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "v3languages"
        ],
        "operationId": "delete_v3_languages_id",
        "summary": "Destroys the Language with the supplied ID if allowed",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The ID of the requested Language"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/analytics/metrics": {
      "get": {
        "tags": [
          "v3analyticsmetrics"
        ],
        "operationId": "get_v3_analytics_metrics",
        "summary": "Returns all metrics.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v3/analytics/metrics/{id}": {
      "get": {
        "tags": [
          "v3analyticsmetrics"
        ],
        "operationId": "get_v3_analytics_metrics_id",
        "summary": "Show the User resource with the supplied name",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "The name of the requested metric"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/conversation/{id}/messages": {
      "get": {
        "tags": [
          "apimessages"
        ],
        "operationId": "getconversation_id_messages",
        "summary": "Fetches all messages for a conversation.  \\\n  Doing so also marks the messages as read on next call. Return empty ",
        "parameters": [
          {
            "name": "conversation_id",
            "type": "number",
            "in": "query",
            "required": true,
            "description": "The id of the conversation"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/messages": {
      "post": {
        "tags": [
          "apimessages"
        ],
        "operationId": "postmessages",
        "summary": "Makes a new message",
        "parameters": [
          {
            "name": "message[recipients]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "formData",
            "required": true,
            "description": "Array of Mobile Users who are recipients"
          },
          {
            "name": "message[body]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "String of the message"
          },
          {
            "name": "message[subject]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "String describing subject of the message"
          },
          {
            "name": "message[conversation_id]",
            "type": "number",
            "in": "formData",
            "description": "ID that identifies the conversation"
          },
          {
            "name": "message[attachment][file_data]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "message[attachment][content_type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "message[attachment][file_name]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/user_role": {
      "get": {
        "tags": [
          "apiuser_roles"
        ],
        "operationId": "getuser_role",
        "summary": "Retrieves the user_role for the current mobile_user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/trials/patients": {
      "get": {
        "tags": [
          "apitrialspatients"
        ],
        "operationId": "getapi_trials_patients",
        "summary": "Returns the list of patients",
        "parameters": [
          {
            "name": "name",
            "type": "number",
            "in": "query",
            "description": "Optional search parameter used to filter patient list by name"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "apitrialspatients"
        ],
        "operationId": "postapi_trials_patients",
        "summary": "Creates a patient",
        "parameters": [
          {
            "name": "patient[site_id]",
            "type": "number",
            "in": "formData",
            "description": "Id for associated site"
          },
          {
            "name": "patient[mobile_user_id]",
            "type": "number",
            "in": "formData",
            "description": "Id for associated mobile_user"
          }
        ],
        "responses": {
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          }
        }
      }
    },
    "/api/trials/patients/me": {
      "get": {
        "tags": [
          "apitrialspatients"
        ],
        "operationId": "getapi_trials_patients_me",
        "summary": "Returns the current patient object associted with a given user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/trials/patients/{id}": {
      "patch": {
        "tags": [
          "apitrialspatients"
        ],
        "operationId": "patchapi_trials_patients_id",
        "summary": "Updates the given patient",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "patient[site_id]",
            "type": "number",
            "in": "formData",
            "description": "Id for associated site"
          },
          {
            "name": "patient[mobile_user_id]",
            "type": "number",
            "in": "formData",
            "description": "Id for associated mobile_user"
          }
        ],
        "responses": {
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/api/trials/sites": {
      "get": {
        "tags": [
          "apitrialssites"
        ],
        "operationId": "getapi_trials_sites",
        "summary": "Retreives a list of all sites.",
        "parameters": [
          {
            "name": "country",
            "type": "string",
            "in": "query",
            "description": "Optional search parameter used to filter site list by country"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/trials/sites/{id}": {
      "get": {
        "tags": [
          "apitrialssites"
        ],
        "operationId": "getapi_trials_sites_id",
        "summary": "Retreives a given site.",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Site id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/advertisements": {
      "get": {
        "tags": [
          "apiadvertisements"
        ],
        "operationId": "getadvertisements",
        "summary": "Retrieves the list of all the advertisements",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/advertisements/settings": {
      "get": {
        "tags": [
          "apiadvertisements"
        ],
        "operationId": "getadvertisements_settings",
        "summary": "Retrieves the settings of the advertisements. ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/callbacks": {
      "get": {
        "tags": [
          "apicallbacks"
        ],
        "operationId": "getcallbacks",
        "summary": "Returns all the callbacks",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/callbacks/{id}": {
      "get": {
        "tags": [
          "apicallbacks"
        ],
        "operationId": "getcallbacks_{id}",
        "summary": "Returns the information associated with a callback",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "query",
            "required": true,
            "description": "The id of the callback"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/callbacks/{id}/execute": {
      "get": {
        "tags": [
          "apicallbacks"
        ],
        "operationId": "getcallbacks_{id}_execute",
        "summary": "Validates the conditions and executes a single callback",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "query",
            "required": true,
            "description": "The id of the callback"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/callbacks/execute_multiple": {
      "get": {
        "tags": [
          "apicallbacks"
        ],
        "operationId": "getcallbacks_execute_multiple",
        "summary": "Given an event and the owner this will execute all the actions",
        "parameters": [
          {
            "name": "event",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "The string identifier for the trigger that was activated"
          },
          {
            "name": "owner_type",
            "type": "string",
            "enum": [
              "ProximityAlert",
              "VuforiaTarget"
            ],
            "in": "query",
            "required": true
          },
          {
            "name": "owner_id",
            "type": "number",
            "in": "query",
            "required": true,
            "description": "The id of the proximity alert that was triggered by the device"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/proximity_alerts": {
      "get": {
        "tags": [
          "apiproximity_alerts"
        ],
        "operationId": "getproximity_alerts",
        "summary": "Return the list of proximity alerts",
        "parameters": [
          {
            "name": "beacon_id",
            "type": "number",
            "in": "query",
            "description": "This field can be used to filter the proximity alerts by beacon"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/profile_attributes": {
      "get": {
        "tags": [
          "apiprofile_attributes"
        ],
        "operationId": "getprofile_attributes",
        "summary": "Gets all the custom attributes for the\n  profile along with its values",
        "parameters": [
          {
            "name": "include_hidden",
            "type": "boolean",
            "in": "query",
            "description": "Whether the response should include the hidden attributes(Encrypted Data)"
          },
          {
            "name": "include_values",
            "type": "boolean",
            "in": "query",
            "description": "Whether the response should include the existing values of each attribute"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "apiprofile_attributes"
        ],
        "operationId": "postprofile_attributes",
        "summary": "Creates a new value for the given profile attribute",
        "parameters": [],
        "responses": {
          "50362": {
            "description": "HTTP status: 400.If any of the parameters for the Value are invalid\n          or missing, additional details can be found on error_message"
          },
          "50367": {
            "description": "HTTP status: 400.If the attribute does not allow multiple values,\n    use update method instead to change the current value"
          },
          "50364": {
            "description": "HTTP status: 404. It there is no attribute with the given api_key"
          }
        }
      }
    },
    "/profile_attributes/id": {
      "put": {
        "tags": [
          "apiprofile_attributes"
        ],
        "operationId": "putprofile_attributes_id",
        "summary": "Updates the profile value",
        "parameters": [],
        "responses": {
          "50362": {
            "description": "HTTP status: 400.If any of the parameters for the Value are invalid\n          or missing, additional details can be found on error_message"
          },
          "50368": {
            "description": "HTTP status: 403."
          },
          "50364": {
            "description": "HTTP status: 404. It there is no value with the given id"
          }
        }
      }
    },
    "/profile_attributes/{id}": {
      "delete": {
        "tags": [
          "apiprofile_attributes"
        ],
        "operationId": "deleteprofile_attributes_{id}",
        "summary": "Deletes the value with the given id",
        "parameters": [],
        "responses": {
          "50367": {
            "description": "HTTP status: 400.If the attribute does not allow multiple values,\n    use update method instead to change the current value"
          },
          "50368": {
            "description": "HTTP status: 403."
          },
          "50364": {
            "description": "HTTP status: 404. It there is no value with the given id"
          }
        }
      }
    },
    "/profile_attributes/{api_key}": {
      "get": {
        "tags": [
          "apiprofile_attributes"
        ],
        "operationId": "getprofile_attributes_{api_key}",
        "summary": "Returns all the values for the given profile attribute",
        "parameters": [],
        "responses": {
          "50364": {
            "description": "HTTP status: 404. It there is no attribute with the given api_key"
          }
        }
      }
    },
    "/api/related_mobile_users/{related_mobile_user_id}/reminder/rules/{rule_id}/events": {
      "get": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "get_api_related_mobile_users_related_mobile_user_id_reminder_rules_rule_id_events",
        "summary": "Returns the list of events for a particular rule or all of them if no rule is provided",
        "parameters": [
          {
            "name": "related_mobile_user_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "rule_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Permanent link of the rule that should be used to filter the events. If no rule_id is used, all the events will be returned grouped by their rule"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/related_mobile_users/{related_mobile_user_id}/reminder/events": {
      "get": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "get_api_related_mobile_users_related_mobile_user_id_reminder_events",
        "summary": "Returns the list of events for a particular rule or all of them if no rule is provided",
        "parameters": [
          {
            "name": "rule_id",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "Permanent link of the rule that should be used to filter the events. If no rule_id is used, all the events will be returned grouped by their rule"
          },
          {
            "name": "related_mobile_user_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/reminder/rules/{rule_id}/events": {
      "get": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "get_api_reminder_rules_rule_id_events",
        "summary": "Returns the list of events for a particular rule or all of them if no rule is provided",
        "parameters": [
          {
            "name": "rule_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Permanent link of the rule that should be used to filter the events. If no rule_id is used, all the events will be returned grouped by their rule"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      },
      "post": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "postapi_reminder_rules_rule_id_events",
        "summary": "Create a new event for the given rule",
        "parameters": [
          {
            "name": "event[date]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Date in which the event should occur. The format of the parameter is ISO8601"
          },
          {
            "name": "rule_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Permanent link of rule in which the new event will be added"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. If there are no Rules with the given permanent_link"
          }
        }
      }
    },
    "/api/reminder/events": {
      "get": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "get_api_reminder_events",
        "summary": "Returns the list of events for a particular rule or all of them if no rule is provided",
        "parameters": [
          {
            "name": "rule_id",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "Permanent link of the rule that should be used to filter the events. If no rule_id is used, all the events will be returned grouped by their rule"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/reminder/rules/{rule_id}/events/{id}": {
      "patch": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "patchapi_reminder_rules_rule_id_events_id",
        "summary": "Updates the exiting event",
        "parameters": [
          {
            "name": "event[date]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Date in which the event should occur. The format of the parameter is ISO8601"
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "rule_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Permanent link of the rule whose event will be updated"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/api/reminder/rules/{rule_id}/events/{id}/mark": {
      "post": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "post_api_reminder_rules_rule_id_events_id_mark",
        "summary": "Change the status of the event.",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "rule_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Permanent link of the rule whose event will be updated"
          },
          {
            "name": "event_action",
            "type": "string",
            "enum": [
              "completed",
              "ignored"
            ],
            "in": "formData",
            "description": "It represents how the event should be marked"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/api/reminder/rules/{rule_id}/events/mark": {
      "post": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "post_api_reminder_rules_rule_id_events_mark",
        "summary": "Change the status of the event.",
        "parameters": [
          {
            "name": "rule_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Permanent link of the rule whose event will be updated"
          },
          {
            "name": "event_action",
            "type": "string",
            "enum": [
              "completed",
              "ignored"
            ],
            "in": "formData",
            "description": "It represents how the event should be marked"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/api/related_mobile_users/{related_mobile_user_id}/reminder/rules/{rule_id}/events/next": {
      "get": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "get_api_related_mobile_users_related_mobile_user_id_reminder_rules_rule_id_events_next",
        "summary": "Returns the next event for the rule",
        "parameters": [
          {
            "name": "rule_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "related_mobile_user_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50364": {
            "description": "HTTP status: 404. If the rule does not have(or cannot have) a next event"
          }
        }
      }
    },
    "/api/reminder/rules/{rule_id}/events/next": {
      "get": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "get_api_reminder_rules_rule_id_events_next",
        "summary": "Returns the next event for the rule",
        "parameters": [
          {
            "name": "rule_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50364": {
            "description": "HTTP status: 404. If the rule does not have(or cannot have) a next event"
          }
        }
      }
    },
    "/api/related_mobile_users/{related_mobile_user_id}/reminder/rules/{rule_id}/events/{id}/by_date": {
      "get": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "get_api_related_mobile_users_related_mobile_user_id_reminder_rules_rule_id_events_id_by_date",
        "summary": "Returns all the events for the rule on the given date",
        "parameters": [
          {
            "name": "rule_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "related_mobile_user_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "This parameter is sent embedded inside of the url.The date that will be used to filter the events. Use ISO8601 format YYYY-MM-DD"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/api/reminder/rules/{rule_id}/events/{id}/by_date": {
      "get": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "get_api_reminder_rules_rule_id_events_id_by_date",
        "summary": "Returns all the events for the rule on the given date",
        "parameters": [
          {
            "name": "rule_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "This parameter is sent embedded inside of the url.The date that will be used to filter the events. Use ISO8601 format YYYY-MM-DD"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/api/reminder/rules/{rule_id}/events/recent": {
      "get": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "get_api_reminder_rules_rule_id_events_recent",
        "summary": "Return the recent events",
        "parameters": [
          {
            "name": "rule_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "time_unit",
            "type": "string",
            "enum": [
              "week",
              "month"
            ],
            "in": "query"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/reminder/events/recent": {
      "get": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "get_api_reminder_events_recent",
        "summary": "Return the recent events",
        "parameters": [
          {
            "name": "time_unit",
            "type": "string",
            "enum": [
              "week",
              "month"
            ],
            "in": "query"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/reminder/rules/{rule_id}/events/upcoming": {
      "get": {
        "tags": [
          "apireminderevents"
        ],
        "operationId": "getapi_reminder_rules_rule_id_events_upcoming",
        "summary": "Return the upcoming events",
        "parameters": [
          {
            "name": "rule_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "time_unit",
            "type": "string",
            "enum": [
              "week",
              "month"
            ],
            "in": "query"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/surveys": {
      "get": {
        "tags": [
          "apisurveys"
        ],
        "operationId": "getsurveys",
        "summary": "Retrieves the list of all the surveys",
        "parameters": [
          {
            "name": "tag_names",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "description": "Array of the tags names that will be used to filter the survey"
          },
          {
            "name": "tags",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "description": "Array of the tags ids that can be used to filter the surveys"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/surveys/{id}/answer": {
      "post": {
        "tags": [
          "apisurveys"
        ],
        "operationId": "postsurveys_{id}_answer",
        "summary": "Answer the questions of one survey in one request",
        "parameters": [
          {
            "name": "answers",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "formData",
            "required": true,
            "description": "Array of Answer choices"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/conversations": {
      "get": {
        "tags": [
          "apiconversations"
        ],
        "operationId": "getapi_conversations",
        "summary": "Retrieves the list of all conversations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/questions": {
      "get": {
        "tags": [
          "apiquestions"
        ],
        "operationId": "getquestions",
        "summary": "Retrieves the list of all the surveys",
        "parameters": [
          {
            "name": "survey_id",
            "type": "number",
            "in": "query",
            "description": "The id of the survey that will be used to query the Questions"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/devices/update_location": {
      "post": {
        "tags": [
          "apidevices"
        ],
        "operationId": "postdevices_update_location",
        "summary": "Updates the profile information of the mobile user",
        "parameters": [
          {
            "name": "location[longitude]",
            "type": "number",
            "in": "formData",
            "required": true,
            "description": "Longitude of the new location"
          },
          {
            "name": "location[latitude]",
            "type": "number",
            "in": "formData",
            "required": true,
            "description": "Latitude of the new location"
          },
          {
            "name": "location[country]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "location[state]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "location[city]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "location[street]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "location[zip_code]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "422": {
            "description": "If any of the parameters is invalid/missing, additional details can be found on response[messages]"
          }
        }
      }
    },
    "/profile": {
      "get": {
        "tags": [
          "apiprofiles"
        ],
        "operationId": "getprofile",
        "summary": "Retrieves the profile for the current or related mobile_user.",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "put": {
        "tags": [
          "apiprofiles"
        ],
        "operationId": "putprofile",
        "summary": "Updates the profile information of the current or related mobile user",
        "parameters": [
          {
            "name": "profile[email]",
            "type": "string",
            "in": "formData",
            "description": "Must be a valid email address."
          },
          {
            "name": "profile[first_name]",
            "type": "string",
            "in": "formData",
            "description": "First Name"
          },
          {
            "name": "profile[last_name]",
            "type": "string",
            "in": "formData",
            "description": "Last Name"
          },
          {
            "name": "profile[gender]",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "in": "formData",
            "description": "Gender"
          },
          {
            "name": "profile[age]",
            "type": "number",
            "in": "formData",
            "description": "It must be an integer between 0 and 150"
          },
          {
            "name": "profile[language]",
            "type": "string",
            "in": "formData",
            "description": "Language"
          },
          {
            "name": "profile[ethnicity]",
            "type": "string",
            "in": "formData",
            "description": "Ethnicity"
          },
          {
            "name": "profile[zip_code]",
            "type": "string",
            "in": "formData",
            "description": "Zip Code"
          },
          {
            "name": "profile[occupation]",
            "type": "string",
            "in": "formData",
            "description": "Occupation"
          },
          {
            "name": "profile[username]",
            "type": "string",
            "in": "formData",
            "description": "Display name. This attribute must not be confused with +account_name+. +username+ can\n    be changed at will and this is the name that will be displayed when the user communicates with other devices"
          },
          {
            "name": "profile[phone]",
            "type": "string",
            "in": "formData",
            "description": "Phone. This number will be used to verify the mobile_user when requested"
          },
          {
            "name": "profile[avatar]",
            "type": "string",
            "in": "formData",
            "description": "The image uploaded by the user"
          },
          {
            "name": "profile[remove_avatar]",
            "type": "boolean",
            "in": "formData",
            "description": "This attribute must be sent when the user wants to delete the current image associated"
          },
          {
            "name": "profile[timezone]",
            "type": "string",
            "enum": [
              "Africa/Abidjan",
              "Africa/Accra",
              "Africa/Addis_Ababa",
              "Africa/Algiers",
              "Africa/Asmara",
              "Africa/Asmera",
              "Africa/Bamako",
              "Africa/Bangui",
              "Africa/Banjul",
              "Africa/Bissau",
              "Africa/Blantyre",
              "Africa/Brazzaville",
              "Africa/Bujumbura",
              "Africa/Cairo",
              "Africa/Casablanca",
              "Africa/Ceuta",
              "Africa/Conakry",
              "Africa/Dakar",
              "Africa/Dar_es_Salaam",
              "Africa/Djibouti",
              "Africa/Douala",
              "Africa/El_Aaiun",
              "Africa/Freetown",
              "Africa/Gaborone",
              "Africa/Harare",
              "Africa/Johannesburg",
              "Africa/Juba",
              "Africa/Kampala",
              "Africa/Khartoum",
              "Africa/Kigali",
              "Africa/Kinshasa",
              "Africa/Lagos",
              "Africa/Libreville",
              "Africa/Lome",
              "Africa/Luanda",
              "Africa/Lubumbashi",
              "Africa/Lusaka",
              "Africa/Malabo",
              "Africa/Maputo",
              "Africa/Maseru",
              "Africa/Mbabane",
              "Africa/Mogadishu",
              "Africa/Monrovia",
              "Africa/Nairobi",
              "Africa/Ndjamena",
              "Africa/Niamey",
              "Africa/Nouakchott",
              "Africa/Ouagadougou",
              "Africa/Porto-Novo",
              "Africa/Sao_Tome",
              "Africa/Timbuktu",
              "Africa/Tripoli",
              "Africa/Tunis",
              "Africa/Windhoek",
              "America/Adak",
              "America/Anchorage",
              "America/Anguilla",
              "America/Antigua",
              "America/Araguaina",
              "America/Argentina/Buenos_Aires",
              "America/Argentina/Catamarca",
              "America/Argentina/ComodRivadavia",
              "America/Argentina/Cordoba",
              "America/Argentina/Jujuy",
              "America/Argentina/La_Rioja",
              "America/Argentina/Mendoza",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Salta",
              "America/Argentina/San_Juan",
              "America/Argentina/San_Luis",
              "America/Argentina/Tucuman",
              "America/Argentina/Ushuaia",
              "America/Aruba",
              "America/Asuncion",
              "America/Atikokan",
              "America/Atka",
              "America/Bahia",
              "America/Bahia_Banderas",
              "America/Barbados",
              "America/Belem",
              "America/Belize",
              "America/Blanc-Sablon",
              "America/Boa_Vista",
              "America/Bogota",
              "America/Boise",
              "America/Buenos_Aires",
              "America/Cambridge_Bay",
              "America/Campo_Grande",
              "America/Cancun",
              "America/Caracas",
              "America/Catamarca",
              "America/Cayenne",
              "America/Cayman",
              "America/Chicago",
              "America/Chihuahua",
              "America/Coral_Harbour",
              "America/Cordoba",
              "America/Costa_Rica",
              "America/Creston",
              "America/Cuiaba",
              "America/Curacao",
              "America/Danmarkshavn",
              "America/Dawson",
              "America/Dawson_Creek",
              "America/Denver",
              "America/Detroit",
              "America/Dominica",
              "America/Edmonton",
              "America/Eirunepe",
              "America/El_Salvador",
              "America/Ensenada",
              "America/Fort_Nelson",
              "America/Fort_Wayne",
              "America/Fortaleza",
              "America/Glace_Bay",
              "America/Godthab",
              "America/Goose_Bay",
              "America/Grand_Turk",
              "America/Grenada",
              "America/Guadeloupe",
              "America/Guatemala",
              "America/Guayaquil",
              "America/Guyana",
              "America/Halifax",
              "America/Havana",
              "America/Hermosillo",
              "America/Indiana/Indianapolis",
              "America/Indiana/Knox",
              "America/Indiana/Marengo",
              "America/Indiana/Petersburg",
              "America/Indiana/Tell_City",
              "America/Indiana/Vevay",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Indianapolis",
              "America/Inuvik",
              "America/Iqaluit",
              "America/Jamaica",
              "America/Jujuy",
              "America/Juneau",
              "America/Kentucky/Louisville",
              "America/Kentucky/Monticello",
              "America/Knox_IN",
              "America/Kralendijk",
              "America/La_Paz",
              "America/Lima",
              "America/Los_Angeles",
              "America/Louisville",
              "America/Lower_Princes",
              "America/Maceio",
              "America/Managua",
              "America/Manaus",
              "America/Marigot",
              "America/Martinique",
              "America/Matamoros",
              "America/Mazatlan",
              "America/Mendoza",
              "America/Menominee",
              "America/Merida",
              "America/Metlakatla",
              "America/Mexico_City",
              "America/Miquelon",
              "America/Moncton",
              "America/Monterrey",
              "America/Montevideo",
              "America/Montreal",
              "America/Montserrat",
              "America/Nassau",
              "America/New_York",
              "America/Nipigon",
              "America/Nome",
              "America/Noronha",
              "America/North_Dakota/Beulah",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/Ojinaga",
              "America/Panama",
              "America/Pangnirtung",
              "America/Paramaribo",
              "America/Phoenix",
              "America/Port-au-Prince",
              "America/Port_of_Spain",
              "America/Porto_Acre",
              "America/Porto_Velho",
              "America/Puerto_Rico",
              "America/Punta_Arenas",
              "America/Rainy_River",
              "America/Rankin_Inlet",
              "America/Recife",
              "America/Regina",
              "America/Resolute",
              "America/Rio_Branco",
              "America/Rosario",
              "America/Santa_Isabel",
              "America/Santarem",
              "America/Santiago",
              "America/Santo_Domingo",
              "America/Sao_Paulo",
              "America/Scoresbysund",
              "America/Shiprock",
              "America/Sitka",
              "America/St_Barthelemy",
              "America/St_Johns",
              "America/St_Kitts",
              "America/St_Lucia",
              "America/St_Thomas",
              "America/St_Vincent",
              "America/Swift_Current",
              "America/Tegucigalpa",
              "America/Thule",
              "America/Thunder_Bay",
              "America/Tijuana",
              "America/Toronto",
              "America/Tortola",
              "America/Vancouver",
              "America/Virgin",
              "America/Whitehorse",
              "America/Winnipeg",
              "America/Yakutat",
              "America/Yellowknife",
              "Antarctica/Casey",
              "Antarctica/Davis",
              "Antarctica/DumontDUrville",
              "Antarctica/Macquarie",
              "Antarctica/Mawson",
              "Antarctica/McMurdo",
              "Antarctica/Palmer",
              "Antarctica/Rothera",
              "Antarctica/South_Pole",
              "Antarctica/Syowa",
              "Antarctica/Troll",
              "Antarctica/Vostok",
              "Arctic/Longyearbyen",
              "Asia/Aden",
              "Asia/Almaty",
              "Asia/Amman",
              "Asia/Anadyr",
              "Asia/Aqtau",
              "Asia/Aqtobe",
              "Asia/Ashgabat",
              "Asia/Ashkhabad",
              "Asia/Atyrau",
              "Asia/Baghdad",
              "Asia/Bahrain",
              "Asia/Baku",
              "Asia/Bangkok",
              "Asia/Barnaul",
              "Asia/Beirut",
              "Asia/Bishkek",
              "Asia/Brunei",
              "Asia/Calcutta",
              "Asia/Chita",
              "Asia/Choibalsan",
              "Asia/Chongqing",
              "Asia/Chungking",
              "Asia/Colombo",
              "Asia/Dacca",
              "Asia/Damascus",
              "Asia/Dhaka",
              "Asia/Dili",
              "Asia/Dubai",
              "Asia/Dushanbe",
              "Asia/Famagusta",
              "Asia/Gaza",
              "Asia/Harbin",
              "Asia/Hebron",
              "Asia/Ho_Chi_Minh",
              "Asia/Hong_Kong",
              "Asia/Hovd",
              "Asia/Irkutsk",
              "Asia/Istanbul",
              "Asia/Jakarta",
              "Asia/Jayapura",
              "Asia/Jerusalem",
              "Asia/Kabul",
              "Asia/Kamchatka",
              "Asia/Karachi",
              "Asia/Kashgar",
              "Asia/Kathmandu",
              "Asia/Katmandu",
              "Asia/Khandyga",
              "Asia/Kolkata",
              "Asia/Krasnoyarsk",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Asia/Kuwait",
              "Asia/Macao",
              "Asia/Macau",
              "Asia/Magadan",
              "Asia/Makassar",
              "Asia/Manila",
              "Asia/Muscat",
              "Asia/Nicosia",
              "Asia/Novokuznetsk",
              "Asia/Novosibirsk",
              "Asia/Omsk",
              "Asia/Oral",
              "Asia/Phnom_Penh",
              "Asia/Pontianak",
              "Asia/Pyongyang",
              "Asia/Qatar",
              "Asia/Qyzylorda",
              "Asia/Rangoon",
              "Asia/Riyadh",
              "Asia/Saigon",
              "Asia/Sakhalin",
              "Asia/Samarkand",
              "Asia/Seoul",
              "Asia/Shanghai",
              "Asia/Singapore",
              "Asia/Srednekolymsk",
              "Asia/Taipei",
              "Asia/Tashkent",
              "Asia/Tbilisi",
              "Asia/Tehran",
              "Asia/Tel_Aviv",
              "Asia/Thimbu",
              "Asia/Thimphu",
              "Asia/Tokyo",
              "Asia/Tomsk",
              "Asia/Ujung_Pandang",
              "Asia/Ulaanbaatar",
              "Asia/Ulan_Bator",
              "Asia/Urumqi",
              "Asia/Ust-Nera",
              "Asia/Vientiane",
              "Asia/Vladivostok",
              "Asia/Yakutsk",
              "Asia/Yangon",
              "Asia/Yekaterinburg",
              "Asia/Yerevan",
              "Atlantic/Azores",
              "Atlantic/Bermuda",
              "Atlantic/Canary",
              "Atlantic/Cape_Verde",
              "Atlantic/Faeroe",
              "Atlantic/Faroe",
              "Atlantic/Jan_Mayen",
              "Atlantic/Madeira",
              "Atlantic/Reykjavik",
              "Atlantic/South_Georgia",
              "Atlantic/St_Helena",
              "Atlantic/Stanley",
              "Australia/ACT",
              "Australia/Adelaide",
              "Australia/Brisbane",
              "Australia/Broken_Hill",
              "Australia/Canberra",
              "Australia/Currie",
              "Australia/Darwin",
              "Australia/Eucla",
              "Australia/Hobart",
              "Australia/LHI",
              "Australia/Lindeman",
              "Australia/Lord_Howe",
              "Australia/Melbourne",
              "Australia/NSW",
              "Australia/North",
              "Australia/Perth",
              "Australia/Queensland",
              "Australia/South",
              "Australia/Sydney",
              "Australia/Tasmania",
              "Australia/Victoria",
              "Australia/West",
              "Australia/Yancowinna",
              "Brazil/Acre",
              "Brazil/DeNoronha",
              "Brazil/East",
              "Brazil/West",
              "CET",
              "CST6CDT",
              "Canada/Atlantic",
              "Canada/Central",
              "Canada/Eastern",
              "Canada/Mountain",
              "Canada/Newfoundland",
              "Canada/Pacific",
              "Canada/Saskatchewan",
              "Canada/Yukon",
              "Chile/Continental",
              "Chile/EasterIsland",
              "Cuba",
              "EET",
              "EST",
              "EST5EDT",
              "Egypt",
              "Eire",
              "Etc/GMT",
              "Etc/GMT+0",
              "Etc/GMT+1",
              "Etc/GMT+10",
              "Etc/GMT+11",
              "Etc/GMT+12",
              "Etc/GMT+2",
              "Etc/GMT+3",
              "Etc/GMT+4",
              "Etc/GMT+5",
              "Etc/GMT+6",
              "Etc/GMT+7",
              "Etc/GMT+8",
              "Etc/GMT+9",
              "Etc/GMT-0",
              "Etc/GMT-1",
              "Etc/GMT-10",
              "Etc/GMT-11",
              "Etc/GMT-12",
              "Etc/GMT-13",
              "Etc/GMT-14",
              "Etc/GMT-2",
              "Etc/GMT-3",
              "Etc/GMT-4",
              "Etc/GMT-5",
              "Etc/GMT-6",
              "Etc/GMT-7",
              "Etc/GMT-8",
              "Etc/GMT-9",
              "Etc/GMT0",
              "Etc/Greenwich",
              "Etc/UCT",
              "Etc/UTC",
              "Etc/Universal",
              "Etc/Zulu",
              "Europe/Amsterdam",
              "Europe/Andorra",
              "Europe/Astrakhan",
              "Europe/Athens",
              "Europe/Belfast",
              "Europe/Belgrade",
              "Europe/Berlin",
              "Europe/Bratislava",
              "Europe/Brussels",
              "Europe/Bucharest",
              "Europe/Budapest",
              "Europe/Busingen",
              "Europe/Chisinau",
              "Europe/Copenhagen",
              "Europe/Dublin",
              "Europe/Gibraltar",
              "Europe/Guernsey",
              "Europe/Helsinki",
              "Europe/Isle_of_Man",
              "Europe/Istanbul",
              "Europe/Jersey",
              "Europe/Kaliningrad",
              "Europe/Kiev",
              "Europe/Kirov",
              "Europe/Lisbon",
              "Europe/Ljubljana",
              "Europe/London",
              "Europe/Luxembourg",
              "Europe/Madrid",
              "Europe/Malta",
              "Europe/Mariehamn",
              "Europe/Minsk",
              "Europe/Monaco",
              "Europe/Moscow",
              "Europe/Nicosia",
              "Europe/Oslo",
              "Europe/Paris",
              "Europe/Podgorica",
              "Europe/Prague",
              "Europe/Riga",
              "Europe/Rome",
              "Europe/Samara",
              "Europe/San_Marino",
              "Europe/Sarajevo",
              "Europe/Saratov",
              "Europe/Simferopol",
              "Europe/Skopje",
              "Europe/Sofia",
              "Europe/Stockholm",
              "Europe/Tallinn",
              "Europe/Tirane",
              "Europe/Tiraspol",
              "Europe/Ulyanovsk",
              "Europe/Uzhgorod",
              "Europe/Vaduz",
              "Europe/Vatican",
              "Europe/Vienna",
              "Europe/Vilnius",
              "Europe/Volgograd",
              "Europe/Warsaw",
              "Europe/Zagreb",
              "Europe/Zaporozhye",
              "Europe/Zurich",
              "Factory",
              "GB",
              "GB-Eire",
              "GMT",
              "GMT+0",
              "GMT-0",
              "GMT0",
              "Greenwich",
              "HST",
              "Hongkong",
              "Iceland",
              "Indian/Antananarivo",
              "Indian/Chagos",
              "Indian/Christmas",
              "Indian/Cocos",
              "Indian/Comoro",
              "Indian/Kerguelen",
              "Indian/Mahe",
              "Indian/Maldives",
              "Indian/Mauritius",
              "Indian/Mayotte",
              "Indian/Reunion",
              "Iran",
              "Israel",
              "Jamaica",
              "Japan",
              "Kwajalein",
              "Libya",
              "MET",
              "MST",
              "MST7MDT",
              "Mexico/BajaNorte",
              "Mexico/BajaSur",
              "Mexico/General",
              "NZ",
              "NZ-CHAT",
              "Navajo",
              "PRC",
              "PST8PDT",
              "Pacific/Apia",
              "Pacific/Auckland",
              "Pacific/Bougainville",
              "Pacific/Chatham",
              "Pacific/Chuuk",
              "Pacific/Easter",
              "Pacific/Efate",
              "Pacific/Enderbury",
              "Pacific/Fakaofo",
              "Pacific/Fiji",
              "Pacific/Funafuti",
              "Pacific/Galapagos",
              "Pacific/Gambier",
              "Pacific/Guadalcanal",
              "Pacific/Guam",
              "Pacific/Honolulu",
              "Pacific/Johnston",
              "Pacific/Kiritimati",
              "Pacific/Kosrae",
              "Pacific/Kwajalein",
              "Pacific/Majuro",
              "Pacific/Marquesas",
              "Pacific/Midway",
              "Pacific/Nauru",
              "Pacific/Niue",
              "Pacific/Norfolk",
              "Pacific/Noumea",
              "Pacific/Pago_Pago",
              "Pacific/Palau",
              "Pacific/Pitcairn",
              "Pacific/Pohnpei",
              "Pacific/Ponape",
              "Pacific/Port_Moresby",
              "Pacific/Rarotonga",
              "Pacific/Saipan",
              "Pacific/Samoa",
              "Pacific/Tahiti",
              "Pacific/Tarawa",
              "Pacific/Tongatapu",
              "Pacific/Truk",
              "Pacific/Wake",
              "Pacific/Wallis",
              "Pacific/Yap",
              "Poland",
              "Portugal",
              "ROC",
              "ROK",
              "Singapore",
              "Turkey",
              "UCT",
              "US/Alaska",
              "US/Aleutian",
              "US/Arizona",
              "US/Central",
              "US/East-Indiana",
              "US/Eastern",
              "US/Hawaii",
              "US/Indiana-Starke",
              "US/Michigan",
              "US/Mountain",
              "US/Pacific",
              "US/Pacific-New",
              "US/Samoa",
              "UTC",
              "Universal",
              "W-SU",
              "WET",
              "Zulu"
            ],
            "in": "formData",
            "description": "Current timezone for the user.This will be value will be considered while sending any reminders"
          }
        ],
        "responses": {
          "400": {
            "description": "If any of the parameters is invalid/missing, additional details can be found on response[messages]"
          }
        }
      }
    },
    "/v2/insights_trackers/track": {
      "post": {
        "tags": [
          "apiv2insights"
        ],
        "operationId": "postv2_insights_trackers_track",
        "summary": "Track an insight event",
        "parameters": [
          {
            "name": "tracker[action]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "tracker[section]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Refers to the section of the application in which the event was triggered"
          },
          {
            "name": "tracker[value]",
            "type": "string",
            "in": "formData",
            "description": "This is used to group the insights with more detail than the section"
          },
          {
            "name": "tracker[label]",
            "type": "string",
            "in": "formData",
            "description": "Label that will be shown on the platform"
          },
          {
            "name": "tracker[triggered_at]",
            "type": "string",
            "in": "formData",
            "description": "The timestamp of when the event was triggered. If this parameter is not found, the timestamp of the request will be used instead"
          },
          {
            "name": "tracker[brand_id]",
            "type": "string",
            "in": "formData",
            "description": "Specifies which brand owns the insight. Only certain instances require this"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v2/advertisements": {
      "get": {
        "tags": [
          "apiv2advertisements"
        ],
        "operationId": "getv2_advertisements",
        "summary": "Retrieves the list of all the advertisements",
        "parameters": [
          {
            "name": "tag_names",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "query",
            "description": "Array of the tags names that will be used to filter the advertisements"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v2/agreements/request_sign": {
      "post": {
        "tags": [
          "apiv2agreements"
        ],
        "operationId": "postv2_agreements_request_sign",
        "summary": "Request a signature on a new agreement created from a given template",
        "parameters": [
          {
            "name": "permanent_link",
            "type": "string",
            "in": "formData",
            "description": "Permanent Link for the agreement template"
          },
          {
            "name": "agreement_template_id",
            "type": "number",
            "in": "formData",
            "description": "identifier for the agreement template"
          },
          {
            "name": "recipients",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "formData",
            "description": "Agreement Signers"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/Returns a collection of captured values": {
      "/api/v2/data_collection/flow_processes/:flow_process_id/captured_values/retrieve_all": {
        "tags": [
          "apiv2data_collectioncaptured_values"
        ],
        "operationId": "/api/v2/data_collection/flow_processes/:flow_process_id/captured_values/retrieve_allReturns a collection of captured values",
        "parameters": [
          {
            "name": "owner",
            "type": "string",
            "in": "formData",
            "description": "Default: Mobile User performing the request This should be used to change the context of the data collection so that the information can be retrieved properly"
          },
          {
            "name": "existing_id",
            "type": "string",
            "in": "formData",
            "description": "Used for flow processes where the destination is a list of objects"
          },
          {
            "name": "captured_value_group_id",
            "type": "number",
            "in": "formData",
            "description": "Use it to force this endpoint to return \\\n        only the values for the flow submitted for the given CapturedValueGroup"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/Returns a specific captured value": {
      "/api/v2/data_collection/flow_processes/:flow_process_id/captured_values/retrieve_input": {
        "tags": [
          "apiv2data_collectioncaptured_values"
        ],
        "operationId": "/api/v2/data_collection/flow_processes/:flow_process_id/captured_values/retrieve_inputReturns a specific captured value",
        "parameters": [
          {
            "name": "owner",
            "type": "string",
            "in": "formData",
            "description": "Default: Mobile User performing the request This should be used to change the context of the data collection so that the information can be retrieved properly"
          },
          {
            "name": "captured_value_group_id",
            "type": "number",
            "in": "formData",
            "description": "Use it to force this endpoint to return \\\n          only the values for the flow submitted for the given CapturedValueGroup"
          },
          {
            "name": "existing_id",
            "type": "string",
            "in": "formData",
            "description": "Used for flow processes where the destination is a list of objects"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/v2/data_collection/flow_processes": {
      "get": {
        "tags": [
          "apiv2data_collectionflow_processes"
        ],
        "operationId": "getapi_v2_data_collection_flow_processes",
        "summary": "Returns a list of flow process",
        "parameters": [
          {
            "name": "container_id",
            "type": "string",
            "in": "query",
            "description": "Flow Process Container permanent link "
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          }
        }
      }
    },
    "/api/v2/data_collection/flow_processes/{permanent_link}": {
      "get": {
        "tags": [
          "apiv2data_collectionflow_processes"
        ],
        "operationId": "getapi_v2_data_collection_flow_processes_permanent_link",
        "summary": "Returns one flow process",
        "parameters": [
          {
            "name": "permanent_link",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/v2/data_collection/flow_processes/{permanent_link}/collect": {
      "post": {
        "tags": [
          "apiv2data_collectionflow_processes"
        ],
        "operationId": "postapi_v2_data_collection_flow_processes_permanent_link_collect",
        "summary": "Capture data during a Flow Process",
        "parameters": [
          {
            "name": "fields",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "formData",
            "required": true
          },
          {
            "name": "last",
            "type": "boolean",
            "in": "formData",
            "required": true,
            "description": "Flag that must be sent when the information collected is part of the last step in a flow process"
          },
          {
            "name": "permanent_link",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "captured_value_group",
            "type": "number",
            "in": "formData",
            "description": "Id of the CapturedValueGroup that will be used to save the answers.\n    This allows previous answers to be overwritten with new values"
          },
          {
            "name": "submitted_at",
            "type": "string",
            "in": "formData",
            "description": "DateTime that represents when the user entered all the information. The most common use case happens when the user is in offline mode,and the data is not transfered when the user inputs all the information"
          },
          {
            "name": "owner",
            "type": "string",
            "in": "formData",
            "description": "Default: Mobile User performing the request This should be used to change the context of the data collection so that the information captured can be associated with another user or model"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          }
        }
      }
    },
    "/api/v2/data_collection/flow_processes/{id}/request_attachment_email": {
      "post": {
        "tags": [
          "apiv2data_collectionflow_processes"
        ],
        "operationId": "postapi_v2_data_collection_flow_processes_id_request_attachment_email",
        "summary": "Request a mobile user to send an attachment by email for a Flow Process",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          }
        }
      }
    },
    "/api/v2/data_collection/flow_processes/upload_attachment_email": {
      "post": {
        "tags": [
          "apiv2data_collectionflow_processes"
        ],
        "operationId": "postapi_v2_data_collection_flow_processes_upload_attachment_email",
        "summary": "Stores an attachment for a given step for a flow process",
        "parameters": [],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          }
        }
      }
    },
    "/api/v2/data_collection/containers/{id}": {
      "get": {
        "tags": [
          "apiv2data_collectioncontainers"
        ],
        "operationId": "getapi_v2_data_collection_containers_id",
        "summary": "Returns one container",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/v2/data_collection/flow_processes/{flow_process_id}/linked_steps/{linked_step_id}/comments": {
      "get": {
        "tags": [
          "apiv2data_collectionlinked_step_comments"
        ],
        "operationId": "getapi_v2_data_collection_flow_processes_flow_process_id_linked_steps_linked_step_id_comments",
        "summary": "Renders a collection of comments",
        "parameters": [
          {
            "name": "linked_step_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "flow_process_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/v2/data_collection/captured_value_groups": {
      "get": {
        "tags": [
          "apiv2data_collectioncaptured_value_groups"
        ],
        "operationId": "getapi_v2_data_collection_captured_value_groups",
        "summary": "Returns Captured Value Groups",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/data_collection/flow_processes/{flow_process_id}/captured_value_groups": {
      "get": {
        "tags": [
          "apiv2data_collectioncaptured_value_groups"
        ],
        "operationId": "getapi_v2_data_collection_flow_processes_flow_process_id_captured_value_groups",
        "summary": "Returns Captured Value Groups",
        "parameters": [
          {
            "name": "flow_process_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/reminder/rules": {
      "get": {
        "tags": [
          "apiv2reminderrules"
        ],
        "operationId": "get_api_v2_reminder_rules",
        "summary": "Return the list of all the rules",
        "parameters": [],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/v2/reminder/rules/{id}": {
      "get": {
        "tags": [
          "apiv2reminderrules"
        ],
        "operationId": "get_api_v2_reminder_rules_id",
        "summary": "Retrieves one rule",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      },
      "patch": {
        "tags": [
          "apiv2reminderrules"
        ],
        "operationId": "patch_api_v2_reminder_rules_id",
        "summary": "Creates personal rule and schedule",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Permanent link of the rule that\n        will be personalized"
          },
          {
            "name": "reminder_rule[enable]",
            "type": "string",
            "in": "formData",
            "description": "Provides ability to enable or disable a rule for the mobile user."
          },
          {
            "name": "reminder_rule[start_date]",
            "type": "string",
            "in": "formData",
            "description": "StartDate in which the setting should be applicable. The format of the parameter is ISO8601. Not required. Default schedule rule start_date will be used."
          },
          {
            "name": "reminder_rule[end_date]",
            "type": "string",
            "in": "formData",
            "description": "EndDate in which the setting should be applicable. The format of the parameter is ISO8601. Not required. Default reminder rule start_date will be used."
          },
          {
            "name": "reminder_rule[active_time_start]",
            "type": "string",
            "in": "formData",
            "description": "StartTime in which the setting should be applicable. Not required. Default reminder rule start_time will be used."
          },
          {
            "name": "reminder_rule[active_time_end]",
            "type": "string",
            "in": "formData",
            "description": "EndTime in which the setting should be applicable. Not required. Default reminder rule end_time will be used."
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/v2/dynamic/{id}/show": {
      "get": {
        "tags": [
          "apiv2dynamic_contents"
        ],
        "operationId": "getv2_dynamic_{id}_show",
        "summary": "Shows a dynamic content",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "query",
            "required": true,
            "description": "The id of the content"
          }
        ],
        "responses": {
          "404": {
            "description": "If there is no content with the given id"
          }
        }
      }
    },
    "/api/v2/mobile_menus/{id}": {
      "get": {
        "tags": [
          "apiv2mobile_menus"
        ],
        "operationId": "get_api_v2_mobile_menus_id",
        "summary": "Retrieves a mobile menu with the given id",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v2/mobile_menus": {
      "get": {
        "tags": [
          "apiv2mobile_menus"
        ],
        "operationId": "getv2_mobile_menus",
        "summary": "Retrieves the list of all the mobile menus",
        "parameters": [
          {
            "name": "include_subcategories",
            "type": "boolean",
            "in": "query",
            "description": "If set to true the subcategories will be added to the response"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/v2/mobile_menus/{id}/subcategories": {
      "get": {
        "tags": [
          "apiv2mobile_menus"
        ],
        "operationId": "getv2_mobile_menus_{id}_subcategories",
        "summary": "Retrieves the list of all the subcategories associated with the given mobile menu",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "query",
            "description": "The id of the mobile menu whose subcategories will be returned"
          }
        ],
        "responses": {
          "404": {
            "description": "If the mobile menu does not exist or cant be found"
          }
        }
      }
    },
    "/api/v2/site_start/labs/{lab_id}/lab_accreditations": {
      "get": {
        "tags": [
          "apiv2site_startlab_accreditations"
        ],
        "operationId": "getapi_v2_site_start_labs_lab_id_lab_accreditations",
        "summary": "Retrieves a list of accreditations for a lab",
        "parameters": [
          {
            "name": "lab_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "apiv2site_startlab_accreditations"
        ],
        "operationId": "postapi_v2_site_start_labs_lab_id_lab_accreditations",
        "summary": "Creates a new accrediation for a lab",
        "parameters": [
          {
            "name": "lab_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "lab_accreditation[accreditation_number]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "lab_accreditation[expiration]",
            "type": "string",
            "in": "formData",
            "description": "Must use YYYY-MM-DD ISO8601 Date format"
          },
          {
            "name": "lab_accreditation[certificate_type]",
            "type": "string",
            "enum": [
              "waiver",
              "provider",
              "registration",
              "compliance",
              "accreditation"
            ],
            "in": "formData",
            "description": "'shipping' or 'mailing'"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/labs/{lab_id}/lab_accreditations/{id}": {
      "get": {
        "tags": [
          "apiv2site_startlab_accreditations"
        ],
        "operationId": "getapi_v2_site_start_labs_lab_id_lab_accreditations_id",
        "summary": "Retrieves a lab accreditation",
        "parameters": [
          {
            "name": "lab_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Lab Accreditation Id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "apiv2site_startlab_accreditations"
        ],
        "operationId": "patchapi_v2_site_start_labs_lab_id_lab_accreditations_id",
        "summary": "Updates a LabAccreditation with the given parameters",
        "parameters": [
          {
            "name": "lab_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "LabAccreditation Id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "apiv2site_startlab_accreditations"
        ],
        "operationId": "deleteapi_v2_site_start_labs_lab_id_lab_accreditations_id",
        "summary": "Destroys a lab_accreditation with the given id",
        "parameters": [
          {
            "name": "lab_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "lab_accreditation Id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/sites/{site_id}/studies": {
      "get": {
        "tags": [
          "apiv2site_startstudies"
        ],
        "operationId": "getapi_v2_site_start_sites_site_id_studies",
        "summary": "Retrieves a list of studies the current mobile user has been invited to, if the study status is different '        'from 'initial' it returns additional info.",
        "parameters": [
          {
            "name": "site_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          },
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/v2/site_start/studies/{id}": {
      "get": {
        "tags": [
          "apiv2site_startstudies"
        ],
        "operationId": "getapi_v2_site_start_studies_id",
        "summary": "Retrieves a study by id, it returns additional info if the status is other than 'initial'",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Study ID"
          }
        ],
        "responses": {
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          },
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/v2/site_start/studies/{id}/study_sign_off": {
      "get": {
        "tags": [
          "apiv2site_startstudies"
        ],
        "operationId": "getapi_v2_site_start_studies_id_study_sign_off",
        "summary": "Generates or pulls an existing study sign off and returns its data",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/studies/{id}/cta_agreement": {
      "get": {
        "tags": [
          "apiv2site_startstudies"
        ],
        "operationId": "getapi_v2_site_start_studies_id_cta_agreement",
        "summary": "Returns the CTA agreement for a study if it has been uploaded",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/studies/{id}/cda_agreement": {
      "get": {
        "tags": [
          "apiv2site_startstudies"
        ],
        "operationId": "getapi_v2_site_start_studies_id_cda_agreement",
        "summary": "Returns the eAgreement signature information for the current study",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/studies/{id}/financial_disclosure_agreement": {
      "get": {
        "tags": [
          "apiv2site_startstudies"
        ],
        "operationId": "getapi_v2_site_start_studies_id_financial_disclosure_agreement",
        "summary": "Returns the financial disclosure agreement signature information for the study and the current user",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/studies/{study_id}/lab": {
      "get": {
        "tags": [
          "apiv2site_startstudy_lab"
        ],
        "operationId": "getapi_v2_site_start_studies_study_id_lab",
        "summary": "Retrieves the lab that is associated with the study",
        "parameters": [
          {
            "name": "study_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "apiv2site_startstudy_lab"
        ],
        "operationId": "postapi_v2_site_start_studies_study_id_lab",
        "summary": "Creates a relationship between a Study and a Site Lab",
        "parameters": [
          {
            "name": "study_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "study_lab[site_lab_id]",
            "type": "number",
            "in": "formData",
            "description": "The lab must be associated with the Site. This ID should belong to the SiteLab"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/primary_medical_board": {
      "get": {
        "tags": [
          "apiv2site_startprimary_medical_boards"
        ],
        "operationId": "getapi_v2_site_start_primary_medical_board",
        "summary": "Retrieves a specified primary medical board",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/studies/{study_id}/irb": {
      "get": {
        "tags": [
          "apiv2site_startstudy_irb"
        ],
        "operationId": "getapi_v2_site_start_studies_study_id_irb",
        "summary": "Retrieves the irb that is associated with the study",
        "parameters": [
          {
            "name": "study_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/sites/{site_id}/primary_license": {
      "get": {
        "tags": [
          "apiv2site_startprimary_licenses"
        ],
        "operationId": "getapi_v2_site_start_sites_site_id_primary_license",
        "summary": "Retrieves a specified primary license",
        "parameters": [
          {
            "name": "site_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/sites/{site_id}/site_labs": {
      "get": {
        "tags": [
          "apiv2site_startsite_labs"
        ],
        "operationId": "getapi_v2_site_start_sites_site_id_site_labs",
        "summary": "Retrieves a list of the labs that are associated with a site",
        "parameters": [
          {
            "name": "site_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "apiv2site_startsite_labs"
        ],
        "operationId": "postapi_v2_site_start_sites_site_id_site_labs",
        "summary": "Creates a SiteLab relation from the given parameters",
        "parameters": [
          {
            "name": "site_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "site_lab[lab_id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "site_lab[lab_director_id]",
            "type": "number",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/labs/{lab_id}/lab_directors": {
      "get": {
        "tags": [
          "apiv2site_startlab_directors"
        ],
        "operationId": "getapi_v2_site_start_labs_lab_id_lab_directors",
        "summary": "Retrieves the list of directors for the given lab",
        "parameters": [
          {
            "name": "lab_id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "apiv2site_startlab_directors"
        ],
        "operationId": "postapi_v2_site_start_labs_lab_id_lab_directors",
        "summary": "Creates a LabDirector from the given parameters",
        "parameters": [
          {
            "name": "lab_id",
            "type": "string",
            "in": "path",
            "required": true
          },
          {
            "name": "lab_director[first_name]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "lab_director[last_name]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "lab_director[license_number]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "lab_director[cv_effective_date]",
            "type": "string",
            "in": "formData",
            "description": "Must be an ISO8601 date"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/labs/{lab_id}/lab_directors/{id}": {
      "get": {
        "tags": [
          "apiv2site_startlab_directors"
        ],
        "operationId": "getapi_v2_site_start_labs_lab_id_lab_directors_id",
        "summary": "Retrieves a single lab director",
        "parameters": [
          {
            "name": "lab_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lab id"
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "Lab Director id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/studies/{study_id}/study_addresses": {
      "get": {
        "tags": [
          "apiv2site_startstudy_addresses"
        ],
        "operationId": "getapi_v2_site_start_studies_study_id_study_addresses",
        "summary": "Retrieves a list of addresses associated with the study",
        "parameters": [
          {
            "name": "study_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Study's id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "apiv2site_startstudy_addresses"
        ],
        "operationId": "postapi_v2_site_start_studies_study_id_study_addresses",
        "summary": "Creates a study-address relationship",
        "parameters": [
          {
            "name": "study_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Study's id"
          },
          {
            "name": "study_address[category]",
            "type": "string",
            "enum": [
              "primary",
              "mailing",
              "payment",
              "ip shipment"
            ],
            "in": "formData",
            "description": "Purpose of the address within the study"
          },
          {
            "name": "study_address[site_address_id]",
            "type": "number",
            "in": "formData",
            "description": "This should be a valid Address id,that is associated with the site"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/studies/{study_id}/study_addresses/{id}": {
      "get": {
        "tags": [
          "apiv2site_startstudy_addresses"
        ],
        "operationId": "getapi_v2_site_start_studies_study_id_study_addresses_id",
        "summary": "Retrieves an address",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Address Id"
          },
          {
            "name": "study_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Study's id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "apiv2site_startstudy_addresses"
        ],
        "operationId": "deleteapi_v2_site_start_studies_study_id_study_addresses_id",
        "summary": "Destroys a StudyAddress with the given id",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Address Id"
          },
          {
            "name": "study_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Study's id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/sites": {
      "get": {
        "tags": [
          "apiv2site_startsites"
        ],
        "operationId": "getapi_v2_site_start_sites",
        "summary": "Retrieves a list of all sites",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/sites/{id}": {
      "get": {
        "tags": [
          "apiv2site_startsites"
        ],
        "operationId": "getapi_v2_site_start_sites_id",
        "summary": "Retrieves a specified site",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The site's id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/sites/{id}/status": {
      "get": {
        "tags": [
          "apiv2site_startsites"
        ],
        "operationId": "getapi_v2_site_start_sites_id_status",
        "summary": "Retrieves the combined statuses of child entities for a specified site",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The site's id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/labs": {
      "get": {
        "tags": [
          "apiv2site_startlabs"
        ],
        "operationId": "getapi_v2_site_start_labs",
        "summary": "Retrieves a list of labs",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "apiv2site_startlabs"
        ],
        "operationId": "postapi_v2_site_start_labs",
        "summary": "Creates a lab from the given parameters",
        "parameters": [
          {
            "name": "lab[name]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/labs/{id}": {
      "get": {
        "tags": [
          "apiv2site_startlabs"
        ],
        "operationId": "getapi_v2_site_start_labs_id",
        "summary": "Retrieves a lab",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Lab Id"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/sites/{site_id}/addresses": {
      "get": {
        "tags": [
          "apiv2site_startaddresses"
        ],
        "operationId": "getapi_v2_site_start_sites_site_id_addresses",
        "summary": "Retrieves a list of addresses for a site",
        "parameters": [
          {
            "name": "site_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Site's permanent link"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "apiv2site_startaddresses"
        ],
        "operationId": "postapi_v2_site_start_sites_site_id_addresses",
        "summary": "Creates an address from the given parameters",
        "parameters": [
          {
            "name": "address[title]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "site_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Site's permanent link"
          },
          {
            "name": "address[phone_number]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[email]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[category]",
            "type": "string",
            "in": "formData",
            "description": "'shipping' or 'mailing'"
          },
          {
            "name": "address[country]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[state]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[city]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[street]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[latitude]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[longitude]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[zip_code]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[address_line_1]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[address_line_2]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[address_line_3]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/site_start/sites/{site_id}/addresses/{id}": {
      "get": {
        "tags": [
          "apiv2site_startaddresses"
        ],
        "operationId": "getapi_v2_site_start_sites_site_id_addresses_id",
        "summary": "Retrieves an address",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Address Id"
          },
          {
            "name": "site_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Site's permanent link"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "apiv2site_startaddresses"
        ],
        "operationId": "patchapi_v2_site_start_sites_site_id_addresses_id",
        "summary": "Updates an address with the given parameters",
        "parameters": [
          {
            "name": "address[title]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Address Id"
          },
          {
            "name": "site_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Site's permanent link"
          },
          {
            "name": "address[phone_number]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[email]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[category]",
            "type": "string",
            "in": "formData",
            "description": "'shipping' or 'mailing'"
          },
          {
            "name": "address[country]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[state]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[city]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[street]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[latitude]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[longitude]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[zip_code]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[address_line_1]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[address_line_2]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "address[address_line_3]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "delete": {
        "tags": [
          "apiv2site_startaddresses"
        ],
        "operationId": "deleteapi_v2_site_start_sites_site_id_addresses_id",
        "summary": "Destroys an address with the given id",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Address Id"
          },
          {
            "name": "site_id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Site's permanent link"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/v2/event/reported_actions": {
      "post": {
        "tags": [
          "apiv2eventreported_actions"
        ],
        "operationId": "postapi_v2_event_reported_actions",
        "summary": "Track an event done by a mobile user",
        "parameters": [
          {
            "name": "data[action]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Action that the user took upon the resource"
          },
          {
            "name": "data[resource]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Name of the resource that was affected by the user action"
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50364": {
            "description": "HTTP status: 404. If there are no triggers configured for the event reported"
          }
        }
      }
    },
    "/log": {
      "post": {
        "tags": [
          "apilog"
        ],
        "operationId": "postlog",
        "summary": "Tracks a new event in the log ",
        "parameters": [
          {
            "name": "entry[level]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "This indicates the level of importance of the log entry.\n                                                 If the log system is disabled only entries with level \"Fatal\"\n                                                 and \"Error\" will be tracked"
          },
          {
            "name": "entry[message]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "entry[tag]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "request_information[method]",
            "type": "string",
            "in": "formData",
            "description": "The method of the request"
          },
          {
            "name": "request_information[params]",
            "type": "string",
            "in": "formData",
            "description": "The body or parameters that were sent on the failing/debugging request"
          },
          {
            "name": "request_information[status_code]",
            "type": "string",
            "in": "formData",
            "description": "The response of the request"
          },
          {
            "name": "request_information[url]",
            "type": "string",
            "in": "formData",
            "description": "The URL of the request"
          },
          {
            "name": "device_information[app_version]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "device_information[brand]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "device_information[carrier]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "device_information[gps_status]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "device_information[latitude]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "device_information[longitude]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "device_information[manufacturer]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "device_information[network_status]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "device_information[os_version]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "device_information[push_id]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "device_information[token]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "device_information[udid]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "device_information[technology]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/users": {
      "post": {
        "tags": [
          "apiusers"
        ],
        "operationId": "postapi_users",
        "summary": "Invite users to web applications",
        "parameters": [
          {
            "name": "data[attributes][user_role_id]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][email]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[attributes][first_name]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "data[id]",
            "type": "number",
            "in": "formData"
          },
          {
            "name": "data[type]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][prefix]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][last_name]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][phone]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "data[attributes][message]",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "": {
            "description": ""
          }
        }
      }
    },
    "/dynamic/{id}/show": {
      "get": {
        "tags": [
          "apidynamic_contents"
        ],
        "operationId": "getdynamic_{id}_show",
        "summary": "Shows a dynamic content",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "query",
            "required": true,
            "description": "The id of the content"
          }
        ],
        "responses": {
          "404": {
            "description": "If there is no content with the given id"
          }
        }
      }
    },
    "/dynamic/{permanent_link}/random": {
      "get": {
        "tags": [
          "apidynamic_contents"
        ],
        "operationId": "getdynamic_{permanent_link}_random",
        "summary": "Retrieves a random dynamic content that belongs to a certain Content Type",
        "parameters": [
          {
            "name": "permanent_link",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "The permanent link for the requested +content_type+. Note: This parameter is part of the URL"
          }
        ],
        "responses": {
          "404": {
            "description": "If there are no content_types with the given permanent_link"
          },
          "401": {
            "description": "If the content_type is not accessible for the mobile_user/device with the given access token"
          }
        }
      }
    },
    "/dynamic/{permanent_link}": {
      "get": {
        "tags": [
          "apidynamic_contents"
        ],
        "operationId": "getdynamic_{permanent_link}",
        "summary": "Retrieves a list of contents that belongs to a certain Content Type",
        "parameters": [
          {
            "name": "permanent_link",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "The permanent link for the requested +content_type+. Note: This parameter is part of the URL"
          },
          {
            "name": "page",
            "type": "number",
            "in": "query",
            "description": "The page number"
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "query",
            "description": "The number of items that will be returned in the request/page"
          }
        ],
        "responses": {
          "404": {
            "description": "If there are no content_types with the given permanent_link"
          },
          "401": {
            "description": "If the content_type is not accessible for the mobile_user/device with the given access token"
          }
        }
      },
      "post": {
        "tags": [
          "apidynamic_contents"
        ],
        "operationId": "postdynamic_{permanent_link}",
        "summary": "Creates a content that belongs to a certain Content Type",
        "parameters": [
          {
            "name": "content[title]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The title of the new content"
          },
          {
            "name": "permanent_link",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The permanent link for the requested +content_type+. Note: This parameter is part of the URL"
          },
          {
            "name": "content[description]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "content[image]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "content[other]",
            "type": "string",
            "in": "formData",
            "description": "Each dynamic content has specific attributes of their own, some of them can be set to be required and others are optional. Check the Content Type definition at server.captivereach/admin/content_types "
          }
        ],
        "responses": {
          "404": {
            "description": "If there are no content_types with the given permanent_link"
          },
          "401": {
            "description": "If the content_type is not accessible or can't be created via API "
          },
          "400": {
            "description": "If any of the parameters is invalid/missing, additional details can be found on response[messages]"
          }
        }
      }
    },
    "/dynamic/{permanent_link}/{id}": {
      "put": {
        "tags": [
          "apidynamic_contents"
        ],
        "operationId": "putdynamic_{permanent_link}_{id}",
        "summary": "Updates an existing content that belongs to a certain Content Type",
        "parameters": [
          {
            "name": "content[title]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The title of the new content"
          },
          {
            "name": "id",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The id of the content that will be updated. Note: This parameter is part of the URL "
          },
          {
            "name": "permanent_link",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The permanent link for the requested +content_type+. Note: This parameter is part of the URL "
          },
          {
            "name": "content[description]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "content[image]",
            "type": "string",
            "in": "formData"
          },
          {
            "name": "content[other]",
            "type": "string",
            "in": "formData",
            "description": "Each dynamic content has specific attributes of their own, some of them can be set to be required and others are optional. Check the Content Type definition at server.captivereach/admin/content_types "
          }
        ],
        "responses": {
          "404": {
            "description": "If there are no content_types with the given permanent_link"
          },
          "401": {
            "description": "If the content_type is not accessible or can't be created via API "
          },
          "400": {
            "description": "If any of the parameters is invalid/missing, additional details can be found on response[messages]"
          }
        }
      }
    },
    "/dynamic/{permanent_link}/favorites": {
      "get": {
        "tags": [
          "apidynamic_contents"
        ],
        "operationId": "getdynamic_{permanent_link}_favorites",
        "summary": "  Retrieves a list with the favorite contents for the device/mobile_user.\n",
        "parameters": [
          {
            "name": "permanent_link",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "The permanent link for the requested content_type. Note: This parameter is part of the URL "
          }
        ],
        "responses": {
          "404": {
            "description": "If there is no content_type with the given permanent_link,\n  or if the content_type does not allow favorites"
          }
        }
      }
    },
    "/dynamic/{permanent_link}/filter": {
      "post": {
        "tags": [
          "apidynamic_contents"
        ],
        "operationId": "postdynamic_{permanent_link}_filter",
        "summary": "  Filters and returns a list of the contents for the given content_type.\n",
        "parameters": [
          {
            "name": "permanent_link",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The permanent link for the requested +content_type+.\n  Note: This parameter is part of the URL "
          },
          {
            "name": "filters[attribute]",
            "type": "string",
            "in": "formData",
            "description": "      The api-name of the attribute that will be used to filter the contents. As a special case it can have the value: +search+.\n"
          },
          {
            "name": "filters[values]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "formData",
            "description": "This values are used when filtering a string/text attribute, the filter will return the\n    contents that contain any of the values inside of the array"
          },
          {
            "name": "filters[min]",
            "type": "string",
            "in": "formData",
            "description": "The minimum value that the attribute must have in order to include that content in the list\n    that will be returned"
          },
          {
            "name": "filters[max]",
            "type": "string",
            "in": "formData",
            "description": "The maximum value that the attribute must have in order to include that content in the\n    list that will be returned"
          },
          {
            "name": "filters[exact_lat]",
            "type": "number",
            "in": "formData",
            "description": "The exact latitude for the Radius filter"
          },
          {
            "name": "filters[exact_lng]",
            "type": "number",
            "in": "formData",
            "description": "The exact longitude for the Radius filter"
          },
          {
            "name": "filters[radius]",
            "type": "number",
            "in": "formData",
            "description": "The radius that will be used on a Radius Filter"
          },
          {
            "name": "filters[sw_lat]",
            "type": "number",
            "in": "formData",
            "description": "The South west coordinate latitude for the Box Filter"
          },
          {
            "name": "filters[sw_lng]",
            "type": "number",
            "in": "formData",
            "description": "The South west coordinate longitude for the Box Filter"
          },
          {
            "name": "filters[ne_lat]",
            "type": "number",
            "in": "formData",
            "description": "The North east coordinate latitude for the Box Filter"
          },
          {
            "name": "filters[ne_lng]",
            "type": "number",
            "in": "formData",
            "description": "The North east coordinate longitude for the Box Filter"
          },
          {
            "name": "filters[whole_word]",
            "type": "boolean",
            "in": "formData",
            "description": "Only the contents that have one word equal to the term give will be returned. Default: false"
          },
          {
            "name": "filters[case_sensitive]",
            "type": "boolean",
            "in": "formData",
            "description": "Forces the search to be case sensitive. Default: false"
          },
          {
            "name": "filters[search_method]",
            "type": "string",
            "enum": [
              "starts_with",
              "ends_with",
              "whole_word"
            ],
            "in": "formData",
            "description": "It can have one of the following values: +starts_with+, +ends_with+ or +whole_word."
          },
          {
            "name": "minimal",
            "type": "boolean",
            "in": "formData",
            "description": "This will change the attributes that will be returned in the list.\nIf it is true, then only the attributes that are sent on the +filters+ array will be retrieved"
          },
          {
            "name": "brand_relative",
            "type": "boolean",
            "in": "formData",
            "description": "This is used to filter the contents by favorites, see Additional Filters.\nIf the value is true, it will activate the Favorite Filter"
          },
          {
            "name": "reference_module",
            "type": "string",
            "in": "formData",
            "description": "The module that will be used to look for favorited contents in a +Favorite filter+"
          },
          {
            "name": "order_by[column]",
            "type": "string",
            "in": "formData",
            "description": "The column/attribute that will be used to sort the returned contents"
          },
          {
            "name": "order_by[direction]",
            "type": "string",
            "enum": [
              "desc",
              "asc"
            ],
            "in": "formData",
            "description": "The direction of the sort, desc for descendant, asc for ascendant"
          },
          {
            "name": "order_by[random]",
            "type": "boolean",
            "in": "formData",
            "description": "In case the sort is randomly done this parameter must be true"
          },
          {
            "name": "order_by[seed]",
            "type": "number",
            "in": "formData",
            "description": "The seed used to randomize the sort, this needs to be consistent to allow the pagination to work"
          },
          {
            "name": "page",
            "type": "number",
            "in": "formData",
            "description": "The page number"
          },
          {
            "name": "per_page",
            "type": "number",
            "in": "formData",
            "description": "The number of items that will be returned in the request/page"
          }
        ],
        "responses": {
          "404": {
            "description": "If there are no content_types with the given permanent_link"
          },
          "401": {
            "description": "If the content_type is not accessible for the mobile_user/device with the given access token"
          }
        }
      }
    },
    "/dynamic/{id}/vuforia_target": {
      "get": {
        "tags": [
          "apidynamic_contents"
        ],
        "operationId": "getdynamic_{id}_vuforia_target",
        "summary": "Retrieves the list of vuforia targets associated with the content",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "query",
            "required": true,
            "description": "The id of the content whose vuforia targets will be returned. Note: This parameter is part of the URL"
          }
        ],
        "responses": {
          "404": {
            "description": "If there is no content with the given id"
          }
        }
      }
    },
    "/api/dynamic/{content_type}/pick_email_attachment": {
      "post": {
        "tags": [
          "apidynamic_contents"
        ],
        "operationId": "post_api_dynamic_content_type_pick_email_attachment",
        "summary": "Stores an attachment for a given step for a flow process",
        "parameters": [
          {
            "name": "content_type",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          }
        }
      }
    },
    "/api/status/check": {
      "post": {
        "tags": [
          "apistatus"
        ],
        "operationId": "post_api_status_check",
        "summary": "Finds or creates a status for the given object and owner combination",
        "parameters": [
          {
            "name": "status[object]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "status[object_type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "status[owner_type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "status[owner]",
            "type": "string",
            "in": "formData",
            "description": "Not required when the owner type is \"mobile_user\""
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/status/check_section": {
      "post": {
        "tags": [
          "apistatus"
        ],
        "operationId": "post_api_status_check_section",
        "summary": "Retrieves the statuses that belong to a section of the app",
        "parameters": [
          {
            "name": "status[section]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "String that identifies a group of objects(statusable)"
          },
          {
            "name": "status[owner_type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "status[owner]",
            "type": "string",
            "in": "formData",
            "description": "Not required when the owner type is \"mobile_user\""
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/api/status/transition": {
      "post": {
        "tags": [
          "apistatus"
        ],
        "operationId": "post_api_status_transition",
        "summary": "Triggers a transition in a Status",
        "parameters": [
          {
            "name": "status[transition]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "status[object]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "status[object_type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "status[owner_type]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "status[owner]",
            "type": "string",
            "in": "formData",
            "description": "Not required when the owner type is \"mobile_user\""
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/mobile_users/verify_pin_present": {
      "post": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "postmobile_users_verify_pin_present",
        "summary": "Checks if a specified user account has set the initial PIN \\\n        or not",
        "parameters": [
          {
            "name": "account_name",
            "type": "string",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          }
        }
      }
    },
    "/mobile_users/accept_invitation": {
      "put": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "putmobile_users_accept_invitation",
        "summary": "Sets the pin for an invited mobile user and associates the device with the mobile_user",
        "parameters": [
          {
            "name": "invitation_token",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "pin_confirmation",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "pin",
            "type": "number",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          }
        }
      }
    },
    "/mobile_users/sign_in": {
      "post": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "postmobile_users_sign_in",
        "summary": "Validates the given credentials and signs the user in by returning the access token",
        "parameters": [
          {
            "name": "mobile_user[password]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Password"
          },
          {
            "name": "mobile_user[account_name]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Account Name"
          },
          {
            "name": "device[app_version]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The version of the app that is currently running on the device"
          },
          {
            "name": "device[push_id]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The identifier assigned by GCM or APNS that allows the platform to send push notifications to this device"
          },
          {
            "name": "device[technology]",
            "type": "string",
            "enum": [
              "ios",
              "android"
            ],
            "in": "formData",
            "required": true,
            "description": "The operative system that the device is running."
          },
          {
            "name": "device[udid]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Unique identifier of the device."
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400.If any of the parameters for the device is invalid or missing,\n                 additional details can be found on error_message"
          }
        }
      }
    },
    "/mobile_users/sign_in_guest": {
      "post": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "postmobile_users_sign_in_guest",
        "summary": "Creates a temp mobile_user and returns the access_token associated with it",
        "parameters": [
          {
            "name": "device[app_version]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The version of the app that is currently running on the device"
          },
          {
            "name": "device[push_id]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The identifier assigned by GCM or APNS that allows the platform to send push notifications to this device"
          },
          {
            "name": "device[technology]",
            "type": "string",
            "enum": [
              "ios",
              "android"
            ],
            "in": "formData",
            "required": true,
            "description": "The operative system that the device is running."
          },
          {
            "name": "device[udid]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Unique identifier of the device."
          }
        ],
        "responses": {
          "50362": {
            "description": "HTTP status: 400.If any of the parameters for the device is invalid or missing,\n                 additional details can be found on error_message"
          }
        }
      }
    },
    "/mobile_users/sign_out": {
      "delete": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "deletemobile_users_sign_out",
        "summary": "Detaches the device from the mobile_user ",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/mobile_users/sign_up": {
      "post": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "postmobile_users_sign_up",
        "summary": "Creates a new mobile user",
        "parameters": [
          {
            "name": "device[app_version]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The version of the app that is currently running on the device"
          },
          {
            "name": "device[push_id]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "The identifier assigned by GCM or APNS that allows the platform to send push notifications to this device"
          },
          {
            "name": "device[technology]",
            "type": "string",
            "enum": [
              "ios",
              "android"
            ],
            "in": "formData",
            "required": true,
            "description": "The operative system that the device is running."
          },
          {
            "name": "device[udid]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Unique identifier of the device."
          },
          {
            "name": "mobile_user[password]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Password"
          },
          {
            "name": "mobile_user[account_name]",
            "type": "string",
            "in": "formData",
            "required": true,
            "description": "Account Name"
          },
          {
            "name": "profile[email]",
            "type": "string",
            "in": "formData",
            "description": "Must be a valid email address."
          },
          {
            "name": "profile[first_name]",
            "type": "string",
            "in": "formData",
            "description": "First Name"
          },
          {
            "name": "profile[last_name]",
            "type": "string",
            "in": "formData",
            "description": "Last Name"
          },
          {
            "name": "profile[gender]",
            "type": "string",
            "enum": [
              "male",
              "female"
            ],
            "in": "formData",
            "description": "Gender"
          },
          {
            "name": "profile[age]",
            "type": "number",
            "in": "formData",
            "description": "It must be an integer between 0 and 150"
          },
          {
            "name": "profile[language]",
            "type": "string",
            "in": "formData",
            "description": "Language"
          },
          {
            "name": "profile[ethnicity]",
            "type": "string",
            "in": "formData",
            "description": "Ethnicity"
          },
          {
            "name": "profile[zip_code]",
            "type": "string",
            "in": "formData",
            "description": "Zip Code"
          },
          {
            "name": "profile[occupation]",
            "type": "string",
            "in": "formData",
            "description": "Occupation"
          },
          {
            "name": "profile[username]",
            "type": "string",
            "in": "formData",
            "description": "Display name. This attribute must not be confused with +account_name+. +username+ can\n    be changed at will and this is the name that will be displayed when the user communicates with other devices"
          },
          {
            "name": "profile[phone]",
            "type": "string",
            "in": "formData",
            "description": "Phone. This number will be used to verify the mobile_user when requested"
          },
          {
            "name": "profile[avatar]",
            "type": "string",
            "in": "formData",
            "description": "The image uploaded by the user"
          },
          {
            "name": "profile[remove_avatar]",
            "type": "boolean",
            "in": "formData",
            "description": "This attribute must be sent when the user wants to delete the current image associated"
          },
          {
            "name": "profile[timezone]",
            "type": "string",
            "enum": [
              "Africa/Abidjan",
              "Africa/Accra",
              "Africa/Addis_Ababa",
              "Africa/Algiers",
              "Africa/Asmara",
              "Africa/Asmera",
              "Africa/Bamako",
              "Africa/Bangui",
              "Africa/Banjul",
              "Africa/Bissau",
              "Africa/Blantyre",
              "Africa/Brazzaville",
              "Africa/Bujumbura",
              "Africa/Cairo",
              "Africa/Casablanca",
              "Africa/Ceuta",
              "Africa/Conakry",
              "Africa/Dakar",
              "Africa/Dar_es_Salaam",
              "Africa/Djibouti",
              "Africa/Douala",
              "Africa/El_Aaiun",
              "Africa/Freetown",
              "Africa/Gaborone",
              "Africa/Harare",
              "Africa/Johannesburg",
              "Africa/Juba",
              "Africa/Kampala",
              "Africa/Khartoum",
              "Africa/Kigali",
              "Africa/Kinshasa",
              "Africa/Lagos",
              "Africa/Libreville",
              "Africa/Lome",
              "Africa/Luanda",
              "Africa/Lubumbashi",
              "Africa/Lusaka",
              "Africa/Malabo",
              "Africa/Maputo",
              "Africa/Maseru",
              "Africa/Mbabane",
              "Africa/Mogadishu",
              "Africa/Monrovia",
              "Africa/Nairobi",
              "Africa/Ndjamena",
              "Africa/Niamey",
              "Africa/Nouakchott",
              "Africa/Ouagadougou",
              "Africa/Porto-Novo",
              "Africa/Sao_Tome",
              "Africa/Timbuktu",
              "Africa/Tripoli",
              "Africa/Tunis",
              "Africa/Windhoek",
              "America/Adak",
              "America/Anchorage",
              "America/Anguilla",
              "America/Antigua",
              "America/Araguaina",
              "America/Argentina/Buenos_Aires",
              "America/Argentina/Catamarca",
              "America/Argentina/ComodRivadavia",
              "America/Argentina/Cordoba",
              "America/Argentina/Jujuy",
              "America/Argentina/La_Rioja",
              "America/Argentina/Mendoza",
              "America/Argentina/Rio_Gallegos",
              "America/Argentina/Salta",
              "America/Argentina/San_Juan",
              "America/Argentina/San_Luis",
              "America/Argentina/Tucuman",
              "America/Argentina/Ushuaia",
              "America/Aruba",
              "America/Asuncion",
              "America/Atikokan",
              "America/Atka",
              "America/Bahia",
              "America/Bahia_Banderas",
              "America/Barbados",
              "America/Belem",
              "America/Belize",
              "America/Blanc-Sablon",
              "America/Boa_Vista",
              "America/Bogota",
              "America/Boise",
              "America/Buenos_Aires",
              "America/Cambridge_Bay",
              "America/Campo_Grande",
              "America/Cancun",
              "America/Caracas",
              "America/Catamarca",
              "America/Cayenne",
              "America/Cayman",
              "America/Chicago",
              "America/Chihuahua",
              "America/Coral_Harbour",
              "America/Cordoba",
              "America/Costa_Rica",
              "America/Creston",
              "America/Cuiaba",
              "America/Curacao",
              "America/Danmarkshavn",
              "America/Dawson",
              "America/Dawson_Creek",
              "America/Denver",
              "America/Detroit",
              "America/Dominica",
              "America/Edmonton",
              "America/Eirunepe",
              "America/El_Salvador",
              "America/Ensenada",
              "America/Fort_Nelson",
              "America/Fort_Wayne",
              "America/Fortaleza",
              "America/Glace_Bay",
              "America/Godthab",
              "America/Goose_Bay",
              "America/Grand_Turk",
              "America/Grenada",
              "America/Guadeloupe",
              "America/Guatemala",
              "America/Guayaquil",
              "America/Guyana",
              "America/Halifax",
              "America/Havana",
              "America/Hermosillo",
              "America/Indiana/Indianapolis",
              "America/Indiana/Knox",
              "America/Indiana/Marengo",
              "America/Indiana/Petersburg",
              "America/Indiana/Tell_City",
              "America/Indiana/Vevay",
              "America/Indiana/Vincennes",
              "America/Indiana/Winamac",
              "America/Indianapolis",
              "America/Inuvik",
              "America/Iqaluit",
              "America/Jamaica",
              "America/Jujuy",
              "America/Juneau",
              "America/Kentucky/Louisville",
              "America/Kentucky/Monticello",
              "America/Knox_IN",
              "America/Kralendijk",
              "America/La_Paz",
              "America/Lima",
              "America/Los_Angeles",
              "America/Louisville",
              "America/Lower_Princes",
              "America/Maceio",
              "America/Managua",
              "America/Manaus",
              "America/Marigot",
              "America/Martinique",
              "America/Matamoros",
              "America/Mazatlan",
              "America/Mendoza",
              "America/Menominee",
              "America/Merida",
              "America/Metlakatla",
              "America/Mexico_City",
              "America/Miquelon",
              "America/Moncton",
              "America/Monterrey",
              "America/Montevideo",
              "America/Montreal",
              "America/Montserrat",
              "America/Nassau",
              "America/New_York",
              "America/Nipigon",
              "America/Nome",
              "America/Noronha",
              "America/North_Dakota/Beulah",
              "America/North_Dakota/Center",
              "America/North_Dakota/New_Salem",
              "America/Ojinaga",
              "America/Panama",
              "America/Pangnirtung",
              "America/Paramaribo",
              "America/Phoenix",
              "America/Port-au-Prince",
              "America/Port_of_Spain",
              "America/Porto_Acre",
              "America/Porto_Velho",
              "America/Puerto_Rico",
              "America/Punta_Arenas",
              "America/Rainy_River",
              "America/Rankin_Inlet",
              "America/Recife",
              "America/Regina",
              "America/Resolute",
              "America/Rio_Branco",
              "America/Rosario",
              "America/Santa_Isabel",
              "America/Santarem",
              "America/Santiago",
              "America/Santo_Domingo",
              "America/Sao_Paulo",
              "America/Scoresbysund",
              "America/Shiprock",
              "America/Sitka",
              "America/St_Barthelemy",
              "America/St_Johns",
              "America/St_Kitts",
              "America/St_Lucia",
              "America/St_Thomas",
              "America/St_Vincent",
              "America/Swift_Current",
              "America/Tegucigalpa",
              "America/Thule",
              "America/Thunder_Bay",
              "America/Tijuana",
              "America/Toronto",
              "America/Tortola",
              "America/Vancouver",
              "America/Virgin",
              "America/Whitehorse",
              "America/Winnipeg",
              "America/Yakutat",
              "America/Yellowknife",
              "Antarctica/Casey",
              "Antarctica/Davis",
              "Antarctica/DumontDUrville",
              "Antarctica/Macquarie",
              "Antarctica/Mawson",
              "Antarctica/McMurdo",
              "Antarctica/Palmer",
              "Antarctica/Rothera",
              "Antarctica/South_Pole",
              "Antarctica/Syowa",
              "Antarctica/Troll",
              "Antarctica/Vostok",
              "Arctic/Longyearbyen",
              "Asia/Aden",
              "Asia/Almaty",
              "Asia/Amman",
              "Asia/Anadyr",
              "Asia/Aqtau",
              "Asia/Aqtobe",
              "Asia/Ashgabat",
              "Asia/Ashkhabad",
              "Asia/Atyrau",
              "Asia/Baghdad",
              "Asia/Bahrain",
              "Asia/Baku",
              "Asia/Bangkok",
              "Asia/Barnaul",
              "Asia/Beirut",
              "Asia/Bishkek",
              "Asia/Brunei",
              "Asia/Calcutta",
              "Asia/Chita",
              "Asia/Choibalsan",
              "Asia/Chongqing",
              "Asia/Chungking",
              "Asia/Colombo",
              "Asia/Dacca",
              "Asia/Damascus",
              "Asia/Dhaka",
              "Asia/Dili",
              "Asia/Dubai",
              "Asia/Dushanbe",
              "Asia/Famagusta",
              "Asia/Gaza",
              "Asia/Harbin",
              "Asia/Hebron",
              "Asia/Ho_Chi_Minh",
              "Asia/Hong_Kong",
              "Asia/Hovd",
              "Asia/Irkutsk",
              "Asia/Istanbul",
              "Asia/Jakarta",
              "Asia/Jayapura",
              "Asia/Jerusalem",
              "Asia/Kabul",
              "Asia/Kamchatka",
              "Asia/Karachi",
              "Asia/Kashgar",
              "Asia/Kathmandu",
              "Asia/Katmandu",
              "Asia/Khandyga",
              "Asia/Kolkata",
              "Asia/Krasnoyarsk",
              "Asia/Kuala_Lumpur",
              "Asia/Kuching",
              "Asia/Kuwait",
              "Asia/Macao",
              "Asia/Macau",
              "Asia/Magadan",
              "Asia/Makassar",
              "Asia/Manila",
              "Asia/Muscat",
              "Asia/Nicosia",
              "Asia/Novokuznetsk",
              "Asia/Novosibirsk",
              "Asia/Omsk",
              "Asia/Oral",
              "Asia/Phnom_Penh",
              "Asia/Pontianak",
              "Asia/Pyongyang",
              "Asia/Qatar",
              "Asia/Qyzylorda",
              "Asia/Rangoon",
              "Asia/Riyadh",
              "Asia/Saigon",
              "Asia/Sakhalin",
              "Asia/Samarkand",
              "Asia/Seoul",
              "Asia/Shanghai",
              "Asia/Singapore",
              "Asia/Srednekolymsk",
              "Asia/Taipei",
              "Asia/Tashkent",
              "Asia/Tbilisi",
              "Asia/Tehran",
              "Asia/Tel_Aviv",
              "Asia/Thimbu",
              "Asia/Thimphu",
              "Asia/Tokyo",
              "Asia/Tomsk",
              "Asia/Ujung_Pandang",
              "Asia/Ulaanbaatar",
              "Asia/Ulan_Bator",
              "Asia/Urumqi",
              "Asia/Ust-Nera",
              "Asia/Vientiane",
              "Asia/Vladivostok",
              "Asia/Yakutsk",
              "Asia/Yangon",
              "Asia/Yekaterinburg",
              "Asia/Yerevan",
              "Atlantic/Azores",
              "Atlantic/Bermuda",
              "Atlantic/Canary",
              "Atlantic/Cape_Verde",
              "Atlantic/Faeroe",
              "Atlantic/Faroe",
              "Atlantic/Jan_Mayen",
              "Atlantic/Madeira",
              "Atlantic/Reykjavik",
              "Atlantic/South_Georgia",
              "Atlantic/St_Helena",
              "Atlantic/Stanley",
              "Australia/ACT",
              "Australia/Adelaide",
              "Australia/Brisbane",
              "Australia/Broken_Hill",
              "Australia/Canberra",
              "Australia/Currie",
              "Australia/Darwin",
              "Australia/Eucla",
              "Australia/Hobart",
              "Australia/LHI",
              "Australia/Lindeman",
              "Australia/Lord_Howe",
              "Australia/Melbourne",
              "Australia/NSW",
              "Australia/North",
              "Australia/Perth",
              "Australia/Queensland",
              "Australia/South",
              "Australia/Sydney",
              "Australia/Tasmania",
              "Australia/Victoria",
              "Australia/West",
              "Australia/Yancowinna",
              "Brazil/Acre",
              "Brazil/DeNoronha",
              "Brazil/East",
              "Brazil/West",
              "CET",
              "CST6CDT",
              "Canada/Atlantic",
              "Canada/Central",
              "Canada/Eastern",
              "Canada/Mountain",
              "Canada/Newfoundland",
              "Canada/Pacific",
              "Canada/Saskatchewan",
              "Canada/Yukon",
              "Chile/Continental",
              "Chile/EasterIsland",
              "Cuba",
              "EET",
              "EST",
              "EST5EDT",
              "Egypt",
              "Eire",
              "Etc/GMT",
              "Etc/GMT+0",
              "Etc/GMT+1",
              "Etc/GMT+10",
              "Etc/GMT+11",
              "Etc/GMT+12",
              "Etc/GMT+2",
              "Etc/GMT+3",
              "Etc/GMT+4",
              "Etc/GMT+5",
              "Etc/GMT+6",
              "Etc/GMT+7",
              "Etc/GMT+8",
              "Etc/GMT+9",
              "Etc/GMT-0",
              "Etc/GMT-1",
              "Etc/GMT-10",
              "Etc/GMT-11",
              "Etc/GMT-12",
              "Etc/GMT-13",
              "Etc/GMT-14",
              "Etc/GMT-2",
              "Etc/GMT-3",
              "Etc/GMT-4",
              "Etc/GMT-5",
              "Etc/GMT-6",
              "Etc/GMT-7",
              "Etc/GMT-8",
              "Etc/GMT-9",
              "Etc/GMT0",
              "Etc/Greenwich",
              "Etc/UCT",
              "Etc/UTC",
              "Etc/Universal",
              "Etc/Zulu",
              "Europe/Amsterdam",
              "Europe/Andorra",
              "Europe/Astrakhan",
              "Europe/Athens",
              "Europe/Belfast",
              "Europe/Belgrade",
              "Europe/Berlin",
              "Europe/Bratislava",
              "Europe/Brussels",
              "Europe/Bucharest",
              "Europe/Budapest",
              "Europe/Busingen",
              "Europe/Chisinau",
              "Europe/Copenhagen",
              "Europe/Dublin",
              "Europe/Gibraltar",
              "Europe/Guernsey",
              "Europe/Helsinki",
              "Europe/Isle_of_Man",
              "Europe/Istanbul",
              "Europe/Jersey",
              "Europe/Kaliningrad",
              "Europe/Kiev",
              "Europe/Kirov",
              "Europe/Lisbon",
              "Europe/Ljubljana",
              "Europe/London",
              "Europe/Luxembourg",
              "Europe/Madrid",
              "Europe/Malta",
              "Europe/Mariehamn",
              "Europe/Minsk",
              "Europe/Monaco",
              "Europe/Moscow",
              "Europe/Nicosia",
              "Europe/Oslo",
              "Europe/Paris",
              "Europe/Podgorica",
              "Europe/Prague",
              "Europe/Riga",
              "Europe/Rome",
              "Europe/Samara",
              "Europe/San_Marino",
              "Europe/Sarajevo",
              "Europe/Saratov",
              "Europe/Simferopol",
              "Europe/Skopje",
              "Europe/Sofia",
              "Europe/Stockholm",
              "Europe/Tallinn",
              "Europe/Tirane",
              "Europe/Tiraspol",
              "Europe/Ulyanovsk",
              "Europe/Uzhgorod",
              "Europe/Vaduz",
              "Europe/Vatican",
              "Europe/Vienna",
              "Europe/Vilnius",
              "Europe/Volgograd",
              "Europe/Warsaw",
              "Europe/Zagreb",
              "Europe/Zaporozhye",
              "Europe/Zurich",
              "Factory",
              "GB",
              "GB-Eire",
              "GMT",
              "GMT+0",
              "GMT-0",
              "GMT0",
              "Greenwich",
              "HST",
              "Hongkong",
              "Iceland",
              "Indian/Antananarivo",
              "Indian/Chagos",
              "Indian/Christmas",
              "Indian/Cocos",
              "Indian/Comoro",
              "Indian/Kerguelen",
              "Indian/Mahe",
              "Indian/Maldives",
              "Indian/Mauritius",
              "Indian/Mayotte",
              "Indian/Reunion",
              "Iran",
              "Israel",
              "Jamaica",
              "Japan",
              "Kwajalein",
              "Libya",
              "MET",
              "MST",
              "MST7MDT",
              "Mexico/BajaNorte",
              "Mexico/BajaSur",
              "Mexico/General",
              "NZ",
              "NZ-CHAT",
              "Navajo",
              "PRC",
              "PST8PDT",
              "Pacific/Apia",
              "Pacific/Auckland",
              "Pacific/Bougainville",
              "Pacific/Chatham",
              "Pacific/Chuuk",
              "Pacific/Easter",
              "Pacific/Efate",
              "Pacific/Enderbury",
              "Pacific/Fakaofo",
              "Pacific/Fiji",
              "Pacific/Funafuti",
              "Pacific/Galapagos",
              "Pacific/Gambier",
              "Pacific/Guadalcanal",
              "Pacific/Guam",
              "Pacific/Honolulu",
              "Pacific/Johnston",
              "Pacific/Kiritimati",
              "Pacific/Kosrae",
              "Pacific/Kwajalein",
              "Pacific/Majuro",
              "Pacific/Marquesas",
              "Pacific/Midway",
              "Pacific/Nauru",
              "Pacific/Niue",
              "Pacific/Norfolk",
              "Pacific/Noumea",
              "Pacific/Pago_Pago",
              "Pacific/Palau",
              "Pacific/Pitcairn",
              "Pacific/Pohnpei",
              "Pacific/Ponape",
              "Pacific/Port_Moresby",
              "Pacific/Rarotonga",
              "Pacific/Saipan",
              "Pacific/Samoa",
              "Pacific/Tahiti",
              "Pacific/Tarawa",
              "Pacific/Tongatapu",
              "Pacific/Truk",
              "Pacific/Wake",
              "Pacific/Wallis",
              "Pacific/Yap",
              "Poland",
              "Portugal",
              "ROC",
              "ROK",
              "Singapore",
              "Turkey",
              "UCT",
              "US/Alaska",
              "US/Aleutian",
              "US/Arizona",
              "US/Central",
              "US/East-Indiana",
              "US/Eastern",
              "US/Hawaii",
              "US/Indiana-Starke",
              "US/Michigan",
              "US/Mountain",
              "US/Pacific",
              "US/Pacific-New",
              "US/Samoa",
              "UTC",
              "Universal",
              "W-SU",
              "WET",
              "Zulu"
            ],
            "in": "formData",
            "description": "Current timezone for the user.This will be value will be considered while sending any reminders"
          }
        ],
        "responses": {
          "50362": {
            "description": "HTTP status: 400.If any of the parameters for the MobileUser is invalid\n                 or missing, additional details can be found on error_message"
          }
        }
      }
    },
    "/mobile_users/verify": {
      "post": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "postmobile_users_verify",
        "summary": "Verify the mobile user account",
        "parameters": [
          {
            "name": "verification_code",
            "type": "string",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "50362": {
            "description": "HTTP Status: 400. If the verification code is missing"
          },
          "50363": {
            "description": "HTTP Status: 401. When the verification code is invalid"
          }
        }
      }
    },
    "/mobile_users/forgot_password": {
      "post": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "postmobile_users_forgot_password",
        "summary": "Forgot Password to send the password reset instruction",
        "parameters": [
          {
            "name": "email",
            "type": "string",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "50364": {
            "description": "HTTP Status: 404. Mobile User not found"
          },
          "50362": {
            "description": "HTTP Status: 400. When the email is blank"
          },
          "50366": {
            "description": "HTTP Status: 500. When the email can't be\n    sent, the most common cause is an invalid email in the database"
          }
        }
      }
    },
    "/mobile_users/forgot_account_name": {
      "post": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "postmobile_users_forgot_account_name",
        "summary": "Sends the MobileUser's account name via email",
        "parameters": [
          {
            "name": "email",
            "type": "string",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "50364": {
            "description": "HTTP Status: 404. Mobile User not found"
          },
          "50362": {
            "description": "HTTP Status: 400. When the email is blank"
          },
          "50366": {
            "description": "HTTP Status: 500. When the email can't be\n    sent, the most common cause is an invalid email in the database"
          }
        }
      }
    },
    "/mobile_users/reset_password": {
      "post": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "postmobile_users_reset_password",
        "summary": "Reset password according temp password",
        "parameters": [
          {
            "name": "old_password",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "new_password_confirmation",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "new_password",
            "type": "string",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP Status: 400. Bad credentials"
          }
        }
      }
    },
    "/mobile_users/set_pin": {
      "put": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "putmobile_users_set_pin",
        "summary": "Sets the pin for a mobile user.",
        "parameters": [
          {
            "name": "pin_confirmation",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "pin",
            "type": "number",
            "in": "formData",
            "required": true
          },
          {
            "name": "account_name",
            "type": "string",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/mobile_users/disable": {
      "delete": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "deletemobile_users_disable",
        "summary": "Disable the user",
        "parameters": [],
        "responses": {
          "50361": {
            "description": "HTTP Status: 400. Bad credentials"
          }
        }
      }
    },
    "/mobile_users": {
      "delete": {
        "tags": [
          "apimobile_users"
        ],
        "operationId": "deletemobile_users",
        "summary": "Delete user",
        "parameters": [],
        "responses": {
          "50361": {
            "description": "HTTP Status: 400. Bad credentials"
          }
        }
      }
    },
    "/api/alert_messages": {
      "get": {
        "tags": [
          "apialert_messages"
        ],
        "operationId": "get_api_alert_messages",
        "summary": "List the notifications for the current user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/alert_messages/{id}": {
      "get": {
        "tags": [
          "apialert_messages"
        ],
        "operationId": "get_api_alert_messages_id",
        "summary": "Show the details of a specific notification",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      },
      "delete": {
        "tags": [
          "apialert_messages"
        ],
        "operationId": "delete_api_alert_messages_id",
        "summary": "Remove the notification",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/api/alert_messages/{id}/update_status": {
      "post": {
        "tags": [
          "apialert_messages"
        ],
        "operationId": "post_api_alert_messages_id_update_status",
        "summary": "Update the status of a notification",
        "parameters": [
          {
            "name": "status",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/api/alert_messages/{id}/read_alert": {
      "post": {
        "tags": [
          "apialert_messages"
        ],
        "operationId": "post_api_alert_messages_id_read_alert",
        "summary": "Mark a specific notification as read",
        "parameters": [
          {
            "name": "id",
            "type": "number",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/badges": {
      "get": {
        "tags": [
          "apibadges"
        ],
        "operationId": "getbadges",
        "summary": "Returns all the existing badges",
        "parameters": [],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/badges/{date}": {
      "get": {
        "tags": [
          "apibadges"
        ],
        "operationId": "getbadges_date",
        "summary": "Returns the badges the user earned in a specific day",
        "parameters": [
          {
            "name": "date",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Date to lookup in YYYY-MM-DD format"
          }
        ],
        "responses": {
          "50362": {
            "description": "HTTP status: 400. Date need to be in YYYY-MM-DD format."
          },
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          }
        }
      }
    },
    "/badges/{earned_id}/like_earned": {
      "post": {
        "tags": [
          "apibadges"
        ],
        "operationId": "postbadges_earned_id_like_earned",
        "summary": "Adds a _like_ for a badge earned by a mobile user",
        "parameters": [
          {
            "name": "earned_id",
            "type": "number",
            "in": "path",
            "required": true,
            "description": "The id of the earned badge"
          }
        ],
        "responses": {
          "50374": {
            "description": "HTTP status: 400. You can only _like_ a badge once"
          },
          "50362": {
            "description": "HTTP status: 400. You can _like_ a badge after it has been earned."
          },
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50364": {
            "description": "HTTP status: 404. If there are no badges earned with that ID"
          }
        }
      }
    },
    "/badges/recent": {
      "get": {
        "tags": [
          "apibadges"
        ],
        "operationId": "getbadges_recent",
        "summary": "Shows the latest six badges earned by a mobile user",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/languages": {
      "get": {
        "tags": [
          "apilanguages"
        ],
        "operationId": "get_api_languages",
        "summary": "Returns the list of languages for the application",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/api/languages/{id}": {
      "get": {
        "tags": [
          "apilanguages"
        ],
        "operationId": "get_api_languages_id",
        "summary": "Returns the translations for a given language",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Iso of language for which the translations are needed"
          }
        ],
        "responses": {
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. If there are no Languages for the given iso"
          },
          "400": {
            "description": "If any of the parameters is invalid/missing, additional details can be found on response[messages]"
          }
        }
      }
    },
    "/api/related_mobile_users": {
      "post": {
        "tags": [
          "apirelated_mobile_users"
        ],
        "operationId": "postapi_related_mobile_users",
        "summary": "Invite other mobile users",
        "parameters": [
          {
            "name": "invite[role]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "invite[phone]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "invite[email]",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "invite[first_name]",
            "type": "string",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          }
        }
      },
      "get": {
        "tags": [
          "apirelated_mobile_users"
        ],
        "operationId": "getapi_related_mobile_users",
        "summary": "Retrieve all the related mobile users",
        "parameters": [],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          }
        }
      }
    },
    "/api/related_mobile_users/{id}/disable": {
      "post": {
        "tags": [
          "apirelated_mobile_users"
        ],
        "operationId": "postapi_related_mobile_users_id_disable",
        "summary": "Disables a follower",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/api/related_mobile_users/{id}/enable": {
      "post": {
        "tags": [
          "apirelated_mobile_users"
        ],
        "operationId": "postapi_related_mobile_users_id_enable",
        "summary": "Enables a follower",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/api/related_mobile_users/{id}": {
      "delete": {
        "tags": [
          "apirelated_mobile_users"
        ],
        "operationId": "deleteapi_related_mobile_users_id",
        "summary": "Remove the related user",
        "parameters": [
          {
            "name": "mobile_user",
            "type": "string",
            "in": "formData",
            "required": true
          },
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/api/related_mobile_users/{id}/reinvite": {
      "post": {
        "tags": [
          "apirelated_mobile_users"
        ],
        "operationId": "postapi_related_mobile_users_id_reinvite",
        "summary": "Resend an invite",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "50361": {
            "description": "HTTP status: 401. If the credentials are invalid"
          },
          "50362": {
            "description": "HTTP status: 400. If any of the parameters for the device is invalid or missing, additional details can be found on error_message"
          },
          "50364": {
            "description": "HTTP status: 404. When the resource can't be found with the given parameters"
          }
        }
      }
    },
    "/consult/video_sessions": {
      "get": {
        "tags": [
          "consultvideo_sessions"
        ],
        "operationId": "getconsult_video_sessions",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "consultvideo_sessions"
        ],
        "operationId": "postconsult_video_sessions",
        "parameters": [
          {
            "name": "video_session[participants]",
            "type": "array",
            "items": {
              "type": "string"
            },
            "in": "formData",
            "required": true,
            "description": "An array of participant identifiers, eg  participants['some-user-uuid-here', 'some-other-user-uuid'] "
          },
          {
            "name": "video_session[consultation_id]",
            "type": "number",
            "in": "formData",
            "description": "The consultation that is associated with this video session."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/consult/video_sessions/{id}": {
      "get": {
        "tags": [
          "consultvideo_sessions"
        ],
        "operationId": "getconsult_video_sessions_id",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Video Session ID"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/consult/consultations": {
      "get": {
        "tags": [
          "consultconsultations"
        ],
        "operationId": "getconsult_consultations",
        "parameters": [],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "post": {
        "tags": [
          "consultconsultations"
        ],
        "operationId": "postconsult_consultations",
        "parameters": [
          {
            "name": "consultation[requestor_identifier]",
            "type": "string",
            "in": "formData",
            "description": "A unique identifier for the requesting party, commonly the user UUID. Defaults to the 'effective_user.uuid'"
          },
          {
            "name": "consultation[status]",
            "type": "string",
            "in": "formData",
            "description": "The current status of the consultation, one of: pending, ready, finished, aborted"
          },
          {
            "name": "consultation[name]",
            "type": "string",
            "in": "formData",
            "description": "A human friendly name given to the consultation request."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/consult/consultations/{id}": {
      "get": {
        "tags": [
          "consultconsultations"
        ],
        "operationId": "getconsult_consultations_id",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Consultation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      },
      "patch": {
        "tags": [
          "consultconsultations"
        ],
        "operationId": "patchconsult_consultations_id",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Consultation ID"
          },
          {
            "name": "consultation[requestor_identifier]",
            "type": "string",
            "in": "formData",
            "description": "A unique identifier for the requesting party, commonly the user UUID. Defaults to the 'effective_user.uuid'"
          },
          {
            "name": "consultation[status]",
            "type": "string",
            "in": "formData",
            "description": "The current status of the consultation, one of: pending, ready, finished, aborted"
          },
          {
            "name": "consultation[name]",
            "type": "string",
            "in": "formData",
            "description": "A human friendly name given to the consultation request."
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    },
    "/consult/consultations/{id}/confirm": {
      "post": {
        "tags": [
          "consultconsultations"
        ],
        "operationId": "postconsult_consultations_id_confirm",
        "parameters": [
          {
            "name": "id",
            "type": "string",
            "in": "path",
            "required": true,
            "description": "Consultation ID"
          }
        ],
        "responses": {
          "200": {
            "description": "ok"
          }
        }
      }
    }
  },
  "definitions": {},
  "tags": [
    {
      "name": "v3base",
      "description": "\n\u003ch2 id=\"label-Authentication\"\u003eAuthentication\u003cspan\u003e\u003ca href=\"#label-Authentication\"\u003e\u0026para;\u003c/a\u003e \u003ca href=\"#top\"\u003e\u0026uarr;\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\u003cpre\u003eThe API (V3) uses multiple levels of both authentication and authorization. Authentication is the process of\nverifiying a user is who they say they are, whereas authorization verifies that the authorized user is able to\nperform the action they are attempting. The later very much depends on user roles and permissions.\u003c/pre\u003e\n\n\u003ch3 id=\"label-User+Types\"\u003eUser Types\u003cspan\u003e\u003ca href=\"#label-User+Types\"\u003e\u0026para;\u003c/a\u003e \u003ca href=\"#top\"\u003e\u0026uarr;\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\n\n\u003cpre\u003eThere are two distinct types of users on the platform, \u0026#39;Platform Users\u0026#39; and \u0026#39;Mobile Users\u0026#39;.  Generally speaking,\n\u0026#39;Platform Users\u0026#39; are accounts which login to the platform\u0026#39;s backend admin portal and are used for the management\nof the platform, configuration, and reporting.  Inversely, \u0026#39;Mobile Users\u0026#39; are the more predominant type of user\nand are accounts which are used by the end-users of the platform-- namely patients/trial subjects, members of a patient\u0026#39;s\nCare Circle, PIs, Lab staff, and ancillary assistants.  All communication from mobile applications should being utilizing\n\u0026#39;Mobile Users\u0026#39;.  Some advanced use-cases for custom, trial-specific backends/administration portals MAY utilize \u0026#39;Platform Users\u0026#39;, or both.\u003c/pre\u003e\n\n\u003ch3 id=\"label-Mobile+Application+Key\"\u003eMobile Application Key\u003cspan\u003e\u003ca href=\"#label-Mobile+Application+Key\"\u003e\u0026para;\u003c/a\u003e \u003ca href=\"#top\"\u003e\u0026uarr;\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\n\n\u003cpre\u003eThe Mobile Application key is a hardcoded value in handset applications to confirm that the request is coming from\na P6-created/curated application. It is exchanged with the platform during :Device: creation.\u003c/pre\u003e\n\n\u003ch3 id=\"label-Authentication+Strategies\"\u003eAuthentication Strategies\u003cspan\u003e\u003ca href=\"#label-Authentication+Strategies\"\u003e\u0026para;\u003c/a\u003e \u003ca href=\"#top\"\u003e\u0026uarr;\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\n\n\u003cpre\u003eThe platform supports a few distict authentication strategies, the main being \u0026#39;user-token\u0026#39; and \u0026#39;device-token\u0026#39;.\u003c/pre\u003e\n\n\u003ch4 id=\"label-User+Token+-28Available+for-3A+-5BPlatform+Users-5D-29\"\u003eUser Token (Available for: [Platform Users])\u003cspan\u003e\u003ca href=\"#label-User+Token+-28Available+for-3A+-5BPlatform+Users-5D-29\"\u003e\u0026para;\u003c/a\u003e \u003ca href=\"#top\"\u003e\u0026uarr;\u003c/a\u003e\u003c/span\u003e\u003c/h4\u003e\n\n\u003cpre\u003eUser Token consists of two credentials, both passed via the request HEADER: `X-User-Username` and `X-User-Token`.\nThe username is one of the following: The user\u0026#39;s `email`, the user\u0026#39;s `username`, or the user\u0026#39;s `login`.\nThe token is the user\u0026#39;s `authentication_token`. All these attributes are part of the standard `User` resource response\nwhich is provided as the response to account creation and authentication endpoints.\nExample cURL:\n  curl -X \u0026quot;POST\u0026quot; \u0026quot;https://estudy.clinical6.com/v3/mobile_users/invitation\u0026quot;                  -H \u0026quot;X-User-Username: trodriguez@parallel6.com\u0026quot; -H \u0026quot;X-User-Token: yz7Tam8Tq1vu1CZzv_-c\u0026quot;\u003c/pre\u003e\n\n\u003ch4 id=\"label-Device+Token\"\u003eDevice Token\u003cspan\u003e\u003ca href=\"#label-Device+Token\"\u003e\u0026para;\u003c/a\u003e \u003ca href=\"#top\"\u003e\u0026uarr;\u003c/a\u003e\u003c/span\u003e\u003c/h4\u003e\n\n\u003cpre\u003eDevice tokens are available to all user types, but in practice are mainly only used for `Mobile User`s. The device token\ndepends on the creation and association of a `Device` to a specific account. Devices are transient credentials, in the sense\nthat you may (and MUST for some flows) generate a new device and associate it at any time.  (Most commonly via the Devices#create\nand Registration#create endpoints). Each `Device` has an autogenerated field `access_token`, which MUST be supplied, via the\nheader as an \u0026#39;Authorization Token\u0026#39;. The format for this is `Authorization: Token token=ACCESS_TOKEN`.\n\nExample cURL:\n  curl -X \u0026quot;POST\u0026quot; \u0026quot;https://sanofipompe.clinical6.com/v3/mobile_users/confirmation\u0026quot;                  -H \u0026#39;Authorization: Token token=be33efdbace9b88c03b0339f6075eb38\u0026#39;\u003c/pre\u003e\n"
    },
    {
      "name": "v3settings",
      "description": "\n\u003cp\u003eThis restful API contains edit and list settings. The edit setting API can\nonly edit the keys that already exits in settings table seeded from\ncustomer file or Setting.defaults\u003c/p\u003e\n"
    },
    {
      "name": "v3user_roles",
      "description": "\n\u003cp\u003eResource define UserRole\u003c/p\u003e\n"
    },
    {
      "name": "v3evaluatorevaluations",
      "description": "\n\u003cp\u003eDefines a series of operations that will be executed on an object that\nresult in a score\u003c/p\u003e\n"
    },
    {
      "name": "v3related_users",
      "description": ""
    },
    {
      "name": "v3trialssites",
      "description": "\n\u003cp\u003eThis endpoint provides for the life-cycle management of Trail\n\u0026#39;Sites\u0026#39;, usually Hospitals, Clinics, or Doctor\u0026#39;s offices.\u003c/p\u003e\n"
    },
    {
      "name": "v3trialssite_members",
      "description": "\n\u003cp\u003eThis endpoint provides for the lifecycle of the SiteMember record\n(CrTrials::SiteMember).\u003c/p\u003e\n"
    },
    {
      "name": "v3mobile_usersregistration_validations",
      "description": "\n\u003cp\u003eModels the validation of the status of an existing registration.\u003c/p\u003e\n"
    },
    {
      "name": "v3mobile_userspasswords",
      "description": "\n\u003cp\u003eAllows users to complete the Password reset flow.\u003c/p\u003e\n"
    },
    {
      "name": "v3mobile_userssessions",
      "description": "\n\u003cp\u003eAllows the creation of authenticated sessions with the platform via        \nmobile user authentication. While \u0026#39;email\u0026#39; and\n\u0026#39;account_name\u0026#39; fields are both marked as required        , only one\nor the other is required depending on the what the user has set up.  If\nboth are given,        the email is used. Certain implementations may refer\nto a \u0026#39;PIN\u0026#39;. This is simply a password that,         by practice, is\na 4 digit numeric password. The attribute name passed should still be\n\u0026#39;password\u0026#39;.\u003c/p\u003e\n"
    },
    {
      "name": "v3mobile_usersinvitations",
      "description": "\n\u003cp\u003eAllows mobile users to accept an invitation.\u003c/p\u003e\n"
    },
    {
      "name": "v3mobile_usersconfirmations",
      "description": "\n\u003cp\u003eAllows for the management of the confirmations flow for mobile user records\u003c/p\u003e\n"
    },
    {
      "name": "v3mobile_usersregistrations",
      "description": "\n\u003cp\u003eAllows the creation of new (guest and non-guest) mobile user records,      \nalong with linking of registered devices. Guest users (\u003ca\nhref=\":guest\"\u003eattributes\u003c/a\u003e = \u0026#39;true\u0026#39;) do not         require\ncredentials (account_name or email) to create. If a user attempts to use a\ndevice         associated with an existing user, the request will fail.\n[\u0026#39;Device already in use.\u0026#39;]\u003c/p\u003e\n"
    },
    {
      "name": "v3cohort_assignments",
      "description": "\n\u003cp\u003eManage relationships between a \u0026#39;static\u0026#39; cohort and users\u003c/p\u003e\n"
    },
    {
      "name": "v3locations",
      "description": ""
    },
    {
      "name": "v3data_collectionflow_processes",
      "description": "\n\u003cp\u003eRestful API of FlowProcess, it contains index and create endpoints. The\ncreate endpoint allows the creation of a basic flow process without the\nusual model associations (linked steps, inputs, etc.)\u003c/p\u003e\n"
    },
    {
      "name": "v3data_collectionflow_process_values",
      "description": "\n\u003cp\u003eThis resource collects the data needed to persist the answers given for a\nflow_process. It allows the creation and modification of a\ncaptured_value_group and the captured values for each flow_process input.\u003c/p\u003e\n"
    },
    {
      "name": "v3data_collectioncaptured_value_groups",
      "description": "\n\u003cp\u003eThis resource renders captured value groups data. This resource belongs to\nan user or a mobile user.\u003c/p\u003e\n"
    },
    {
      "name": "v3universal_links",
      "description": "\n\u003cp\u003eThis endpoint provides the \u0026#39;apple-app-site-association\u0026#39; or an\nandroid \u0026#39;assetlinks\u0026#39; file for supporting universal links in mobile\ndevices.\u003c/p\u003e\n"
    },
    {
      "name": "v3status_check",
      "description": "\n\u003cp\u003eTracks the status of objects in association to their owner. The object\nwhose status will be tracked can belong to any of the STATUSABLE_TYPES. The\nowner for whom the status is tracked can be any of the OWNER TYPES.\u003c/p\u003e\n"
    },
    {
      "name": "v3file_uploads",
      "description": "\n\u003cp\u003eAllows upload of files to the desired entity\u003c/p\u003e\n"
    },
    {
      "name": "v3reminderevents",
      "description": "\n\u003cp\u003eThis resource retrieves the events that have been created for Mobile\nUser\u0026#39;s reminders.\u003c/p\u003e\n"
    },
    {
      "name": "v3reminderrules",
      "description": "\n\u003cp\u003eA Reminder Rule combines multiple schedules and content to create Reminder\nEvents As long as a Reminder Rule has a schedule, the Reminder Events will\nbe created following that schedule.\u003c/p\u003e\n\n\u003cp\u003eA user may “personalize” a Reminder by changing some of the parameters used\non the schedule. This is accomplished through the PersonalizedRuleSchedule\nresource.\u003c/p\u003e\n"
    },
    {
      "name": "v3agreementtemplates",
      "description": "\n\u003cp\u003eResource defines Agreement Templates\u003c/p\u003e\n"
    },
    {
      "name": "v3agreementtemplate_fields",
      "description": "\n\u003cp\u003eRestful API of Agreement::TemplateField. It contains creation of\nTemplateField, nested in Agreement::Template Resource. The url require the\nid of template.\u003c/p\u003e\n"
    },
    {
      "name": "v3navigationaction_details",
      "description": "\n\u003cp\u003eResource defines Action Details\u003c/p\u003e\n"
    },
    {
      "name": "v3navigationapp_menus",
      "description": "\n\u003cp\u003eResource defines App Menus\u003c/p\u003e\n"
    },
    {
      "name": "v3devices",
      "description": "\n\u003cp\u003eAllows for the creation, updating, and removal of devices.       A device\nrepresent a “trusted” client that is allowed to authenticate with the\nplatform.\u003c/p\u003e\n\n\u003cpre\u003eA Device can be invalidated from the platform to remove access to compromised accounts. To regain access, a new Device needs\nto be created and reauthenticated\u003c/pre\u003e\n"
    },
    {
      "name": "v3cohorts",
      "description": "\n\u003cp\u003eCohorts are groups of users. Dynamic cohorts are calculated at the time of\nthe query, static cohorts are a manged list\u003c/p\u003e\n"
    },
    {
      "name": "v3filter_groups",
      "description": "\n\u003cp\u003eFilter groups are used to store a collection of filters to apply to a\ncohort\u003c/p\u003e\n"
    },
    {
      "name": "v3allowed_actions",
      "description": "\n\u003cp\u003eHandles Allowed Actions for permissions\u003c/p\u003e\n"
    },
    {
      "name": "v3users",
      "description": "\n\u003cp\u003eThis endpoint provides for the life-cycle management of \u0026#39;Users\u0026#39;\u003c/p\u003e\n"
    },
    {
      "name": "v3reports",
      "description": "\n\u003cpre class=\"ruby\"\u003e\u003cspan class=\"ruby-constant\"\u003eAllows\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ethe\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003egeneration\u003c/span\u003e \u003cspan class=\"ruby-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eretrieval\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eof\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ereports\u003c/span\u003e. \u003cspan class=\"ruby-constant\"\u003eThe\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eendpoints\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eallow\u003c/span\u003e\n\u003c/pre\u003e\n\n\u003cp\u003easynchronously generating the reports – see the corresponding endpoint\ndocuments to see where this functionality is enabled, as well as the\ncurrently available formats.\u003c/p\u003e\n"
    },
    {
      "name": "v3dynamic_contentcontent_types",
      "description": "\n\u003cp\u003eThis resource is used to retrieve the list of Content Types defined in the\nsystem along with the dynamic attributes that are defined on each one of\nthem.\u003c/p\u003e\n"
    },
    {
      "name": "v3dynamic_contentcontents",
      "description": ""
    },
    {
      "name": "v3consentdocuments",
      "description": "\n\u003cp\u003eResource defines Consent Documents\u003c/p\u003e\n"
    },
    {
      "name": "v3consentapprovers",
      "description": ""
    },
    {
      "name": "v3authorizables",
      "description": "\n\u003cp\u003eResource defines all Authorizable entities\u003c/p\u003e\n"
    },
    {
      "name": "v3ediaryentry_group_statuses",
      "description": "\n\u003cp\u003eVirtual model that calculates the rolled up status of an entry_group on\u003c/p\u003e\n\n\u003cpre\u003ea given date for a given owner.\u003c/pre\u003e\n"
    },
    {
      "name": "v3ediaryentry_groups",
      "description": "\n\u003cp\u003eProvides a flexible structure for grouping eDiary entries\u003c/p\u003e\n"
    },
    {
      "name": "v3batchingbatches",
      "description": "\n\u003cp\u003eThis endpoint provides for the life-cycle management Batches.\u003c/p\u003e\n"
    },
    {
      "name": "v3timezones",
      "description": "\n\u003cp\u003eLists timezones supported by the platform. Sortable by offset\u003c/p\u003e\n"
    },
    {
      "name": "v3userspasswords",
      "description": "\n\u003cp\u003eIf user has forgotten password, these methods allow user to change their\npassword\u003c/p\u003e\n"
    },
    {
      "name": "v3userssessions",
      "description": "\n\u003cp\u003eAllows the creation of authenticated sessions with the platform via        \nuser authentication.\u003c/p\u003e\n"
    },
    {
      "name": "v3usersinvitations",
      "description": "\n\u003cp\u003eAllows users to send and accept an invitations.\u003c/p\u003e\n"
    },
    {
      "name": "v3mobile_users",
      "description": "\n\u003cpre\u003eAllows for basic CRUD (and importing) of Mobile Users.\n\n=== Load Mobile User resource scenario ===\nSomehow, if we send a unexistent id in the URI path (ex. /mobile_users/0),\u003c/pre\u003e\n\n\u003cp\u003ethe load_resource doesn\u0026#39;t throw an error like we expect (NotFound). In\nour tests, we expect to get an error code but it returns 200 and it\ncontinue as normal. Somehow the resource variable is filled in with what I\nthink is the user logged into the system. Even if it\u0026#39;s returning\ninformation, it\u0026#39;s for the wrong user, so we\u0026#39;re using our own load\nresource that forces the use of the ID from the params.\u003c/p\u003e\n"
    },
    {
      "name": "v3badges",
      "description": "\n\u003cp\u003eThis resource (internally known as `Reward`s encapsulates the idea of a\nbadge for an accomplishment\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsmodel_translations",
      "description": "\n\u003cp\u003eRepresent the translation of a field, on a given language, for a specific\nrecord\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsrelated_users",
      "description": "\n\u003cp\u003eThis endpoint retrieves RelatedUsers for a specific Mobile User\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsinvitable_user_roles",
      "description": "\n\u003cp\u003eManage User Roles that a given user role can invite. It can be used to\nconfirm the availabe user roles when a user inviting others.\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipslocations",
      "description": "\n\u003cp\u003eCreate Locations for specified Geofence\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsdata_collectionflow_process_values",
      "description": "\n\u003cp\u003eThis resource collects the data needed to persist the answers given for a\nflow_process. It allows the creation and modification of a\ncaptured_value_group and the captured values for each flow_process input.\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsdata_collectioncaptured_value_groups",
      "description": "\n\u003cp\u003eThis resource renders, and allows soft-deletion of captured value groups.\nThis resource belongs to an user or a mobile user.\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsreminder_events",
      "description": "\n\u003cp\u003eThis endpoint provides a list of Reminder::Events for a given MobileUser\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsschedulerpersonalized_rule_schedules",
      "description": "\n\u003cp\u003eThis resource allows for the creation and retrieval of personalized\nversions of reminder rules and other scheduleable resources like\neDiary__entry_groups or reminder__rules.\u003c/p\u003e\n\n\u003cp\u003eThe values defined in the PersonalizedRuleSchedule will override any values\ndefined in the schedulers for the given scheduleable. If the attribute is\nnot defined for the PersonalizedRuleSchedule, the scheduler will use its\ndefault values.\u003c/p\u003e\n\n\u003cp\u003eExample:\u003c/p\u003e\n\n\u003cpre\u003eGiven the following values:\n  personalized_rule_schedule.start_date = \u0026quot;2017-08-10\u0026quot;\n  scheduleable.schedulers.first.time = \u0026quot;16:00\u0026quot;\n  scheduleable.schedulers.first.start_date = \u0026quot;2017-08-01\u0026quot;\nThe final schedule will be\n  start_date: \u0026quot;2017-08-10\u0026quot;\n  time: \u0026quot;16:00\u0026quot;\u003c/pre\u003e\n"
    },
    {
      "name": "v3relationshipsresend_invitation",
      "description": "\n\u003cp\u003eAllows resending an invitation to a user, or a mobile user.\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsprofiles",
      "description": "\n\u003cp\u003eCRUD for the profile of a User or MobileUser\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipslikes",
      "description": ""
    },
    {
      "name": "v3relationshipspermissions",
      "description": "\n\u003cp\u003eIt provides CURD operation of Permission model, its authorizable and its\nallowed_actions.\u003c/p\u003e\n\n\u003cpre\u003eAuthorizable can be Section, DataCollection::FlowProcess and DynamicContent::ContentType.\nAllowedAction persist the access symbol(ex: read, manage).\nA permission grants access defined in associated allowed_actions\nto the user role on records that fall under the authorizable association.\u003c/pre\u003e\n"
    },
    {
      "name": "v3relationshipsdynamic_contentcontents",
      "description": "\n\u003cp\u003eAddresses the contents for a given mobile user\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsdynamic_contentattribute_keys",
      "description": "\n\u003cp\u003eThis resource is used to retrieve the list of Dynamic Attributes defined in\nthe system.\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsediaryentry_group_statuses",
      "description": "\n\u003cp\u003eVirtual model that calculates the rolled up status of an entry_group on\u003c/p\u003e\n\n\u003cpre\u003ea given date for a given parent_record (like owner for example).\u003c/pre\u003e\n"
    },
    {
      "name": "v3relationshipsediaryentries",
      "description": "\n\u003cpre class=\"ruby\"\u003e\u003cspan class=\"ruby-constant\"\u003eThis\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eresource\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003etracks\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003epredefined\u003c/span\u003e \u003cspan class=\"ruby-keyword\"\u003eand\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eoptional\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eeDiary\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eentries\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ethat\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eare\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eto\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ebe\u003c/span\u003e\n\u003c/pre\u003e\n\n\u003cp\u003ecompleted on a specified date by a specific owner. Entries are either\ncreated automatically according to a schedule or they will be created on\nthe spot when the user attempts to complete an optional survey. Entries are\ncreated directly from eDiary Entry Templates which will designate which\nflow_process needs to be completed for that entry. The entry also stores a\nreference to the values captured for that flow_process.\u003c/p\u003e\n\n\u003ch3 id=\"label-Load+Mobile+User+resource+scenario+-3D-3D-3D\"\u003eLoad Mobile User resource scenario ===\u003cspan\u003e\u003ca href=\"#label-Load+Mobile+User+resource+scenario+-3D-3D-3D\"\u003e\u0026para;\u003c/a\u003e \u003ca href=\"#top\"\u003e\u0026uarr;\u003c/a\u003e\u003c/span\u003e\u003c/h3\u003e\n\n\u003cpre\u003eSomehow, if we send a unexistent id in the URI path (ex. /mobile_users/0/entries..),\u003c/pre\u003e\n\n\u003cp\u003ethe load_resource doesn\u0026#39;t throw an error like we expect (NotFound). In\nour tests, we expect to get an error code but it returns 200 and it\ncontinue as normal. Somehow the resource variable is filled in with what I\nthink is the user logged into the system. Even if it\u0026#39;s returning\ninformation, it\u0026#39;s for the wrong user, so we\u0026#39;re using our own load\nresource that forces the use of the ID from the params.\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsediaryentry_templates",
      "description": "\n\u003cp\u003eProvides access to entry templates that guide creation of both predefined\nand manually created eDiary entries.\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipssites",
      "description": "\n\u003cp\u003eReturns the sites for a given user\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipssite_users",
      "description": "\n\u003cp\u003eThis endpoint provides for the life-cycle management Site Users as a nested\nresource of         a parent record. Site Users represent the relationship\nbetween a User and a Site\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipssite_members",
      "description": "\n\u003cp\u003eThis endpoint provides for the the ability to manipulate\n\u0026#39;SiteMembers\u0026#39;         within the scope of a parent record.\nSiteMember represents the relationship between a Site and a MobileUser.\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsevaluation_results",
      "description": "\n\u003cp\u003eThis endpoint provides for the ability to execute an evaluation, given the\nattributes supplied\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsbadges",
      "description": "\n\u003cp\u003eThis endpoint privides the lifecyle functionality for Badges awarded to a\nspecific Mobile User\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsdiscussthreads",
      "description": "\n\u003cpre class=\"ruby\"\u003e\u003cspan class=\"ruby-constant\"\u003eThis\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eresource\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ereturns\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eall\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ethe\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ethread\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003estatuses\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003efrom\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ethe\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ecaptured\u003c/span\u003e\n\u003c/pre\u003e\n\n\u003cp\u003evalues within the specified captured value group.  Its sole purpose is to\navoid having to do N requests to the v3/discuss/threads resource\ncontroller.\u003c/p\u003e\n"
    },
    {
      "name": "v3relationshipsnotificationsdeliveries",
      "description": "\n\u003cp\u003eThis endpoint provides the interaction with the Notification Delivery for\nthe given User.\u003c/p\u003e\n"
    },
    {
      "name": "v3discusscomments",
      "description": "\n\u003cp\u003eProvides the ability to create and read comments within :Threads: on\narbitrary records (“commentable”). (eg :CapturedValues:)\u003c/p\u003e\n"
    },
    {
      "name": "v3discussthreads",
      "description": "\n\u003cp\u003eProvides the ability to create and query :Threads: on arbitrary records\n(“commentable”). (eg :CapturedValues:)\u003c/p\u003e\n"
    },
    {
      "name": "v3geofences",
      "description": "\n\u003cp\u003eThis resource deals with the geofence in the system. Geofence has trigger\nof enter/exit event.\u003c/p\u003e\n"
    },
    {
      "name": "v3menus",
      "description": "\n\u003cp\u003eThis resource handles CRUD for platform users menus\u003c/p\u003e\n"
    },
    {
      "name": "v3languages",
      "description": "\n\u003cp\u003eThis resource deals with the languages in the system.  A language for a\nparticular user will determine what type of translation he/she will get for\na given translated object in the system.\u003c/p\u003e\n"
    },
    {
      "name": "v3analyticsmetrics",
      "description": ""
    },
    {
      "name": "apimessages",
      "description": "\n\u003cp\u003eMessages consist of a subject, body, recipient and sender.\u003c/p\u003e\n"
    },
    {
      "name": "apiuser_roles",
      "description": "\n\u003cp\u003eThe user role associated with the mobile user.\u003c/p\u003e\n"
    },
    {
      "name": "apitrialspatients",
      "description": "\n\u003cp\u003eRetrieves the patient(s) and allows for their creation and updating.\u003c/p\u003e\n"
    },
    {
      "name": "apitrialssites",
      "description": ""
    },
    {
      "name": "apiadvertisements",
      "description": "\n\u003cp\u003eThe Advertisement are used to redirect the user to different screens and\nsections of the application. Usually the redirect to URLs An advertisement\nconsist of: title: The title of the mobile_menu, this should be shown in\nthe device image: The icon of the mobile_menu action: The action that the\ndevices need to execute when the mobile menu is tapped action_object:\nComplementary information for the action, this value depends on the action.\u003c/p\u003e\n\n\u003cp\u003eThis version of the Mobile Menus resource uses the actions as integers, the\nfollowing list maps the values: no_action:        0 url:              1\nplaces:           2 events:           3 galleries:        4 news:          \n5 arts:             6 brands:           7 rewards:          8 scavenger:   \n9 offers:           10 ar:               11 share:            12\ninformation:      13 settings:         14 deals:            15\ndealer_locator:   16 golf_tips:        17 fitting_tool:     18\nshaft_standards:  19 outage_map:       20 cost_calculator:  21\npayment_locator:  22 report_an_outage: 23 subcategory:      24\u003c/p\u003e\n"
    },
    {
      "name": "apicallbacks",
      "description": "\n\u003cp\u003eThe callbacks contain actions that will be executed given certain\nconditions/requirements.\u003c/p\u003e\n"
    },
    {
      "name": "apiproximity_alerts",
      "description": ""
    },
    {
      "name": "apiprofile_attributes",
      "description": "\n\u003cp\u003eThese resource represents all the custom/dynamic attributes that the\nprofile will have in the current platform setup\u003c/p\u003e\n"
    },
    {
      "name": "apireminderevents",
      "description": "\n\u003cp\u003eRepresents every occurrence of a reminder. A reminder event has a status\nthat keeps track of the user actions. STATUS: ACTIVE, COMPLETED_ON_TIME,\nCOMPLETED_LATE, IGNORED, PAST\u003c/p\u003e\n"
    },
    {
      "name": "apisurveys",
      "description": "\n\u003cp\u003eSurveys consist of multiple questions of different types. The answers to\nthe questions on the survey will be stored and reported on the platform.\u003c/p\u003e\n"
    },
    {
      "name": "apiconversations",
      "description": "\n\u003cp\u003eConversations consist of multiple messages.  Can also be considered as a\nthread.\u003c/p\u003e\n"
    },
    {
      "name": "apiquestions",
      "description": "\n\u003cp\u003eQuestions belonging to the Surveys created\u003c/p\u003e\n"
    },
    {
      "name": "apidevices",
      "description": ""
    },
    {
      "name": "apiprofiles",
      "description": "\n\u003cp\u003eThe personal information associated with the mobile user or related mobile\nuser.\u003c/p\u003e\n"
    },
    {
      "name": "apiv2insights",
      "description": "\n\u003cp\u003eAn event that is tracked by the devices. An event consist of Section,\nAction, Value and Label. The section is the abstract group to which the\nevent belongs to. Action is the relevant event that was tracked (i.e: open,\nview, etc). Value is optional and is used to group the insights with more\ndetail. The label is only used when value is present and this will be the\nlabel shown at the moment of analisis on the platform\u003c/p\u003e\n"
    },
    {
      "name": "apiv2advertisements",
      "description": "\n\u003cp\u003eThe Advertisement are used to redirect the user to different screens and\nsections of the application. Usually the redirect to URLs An advertisement\nconsist of: title: The title of the mobile_menu, this should be shown in\nthe device image:\u003c/p\u003e\n\n\u003cpre class=\"ruby\"\u003e\u003cspan class=\"ruby-constant\"\u003eThe\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eicon\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eof\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ethe\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003emobile_menu\u003c/span\u003e\n\u003c/pre\u003e\n\n\u003cp\u003eaction:\u003c/p\u003e\n\n\u003cpre\u003eThe action that the devices need to execute when\nthe mobile menu is tapped\u003c/pre\u003e\n\n\u003cp\u003eaction_object: Complementary information for the action, this value depends\non the action.\u003c/p\u003e\n"
    },
    {
      "name": "apiv2agreements",
      "description": "\n\u003cp\u003eAgreements is a resource that allows getting electronic signature on\npre-prepared document template using Adobe Sign web service. This resource\nneeds an agreement_template_id, recipients and provides methods to request\na signature from the user by dynamically creating the agreement and\npresenting the user with the customized URL allowing him to enter the\nrequested fields and to sign the agreement.\u003c/p\u003e\n"
    },
    {
      "name": "apiv2data_collectioncaptured_values",
      "description": "\n\u003cp\u003ecaptured values can be retrieved and viewed by Mobile users.  A captured\nvalue comes from the FlowProcess#collect endpoint. A captured value can be\nrelated to data for the mobile user, profile, site, etc. A captured value\nwill be related to a captured value group. A captured value group is\ndirectly related to Mobile user\u0026#39;s submittal date. Multiple captured\nvalues can be submitted for a single input.  The latest captured value will\nbe displayed.\u003c/p\u003e\n"
    },
    {
      "name": "apiv2data_collectionflow_processes",
      "description": "\n\u003cp\u003eDefines a flow process or a sequence of screens that are displayed to the\nuser in order to capture data. To edit, delete, or create a new flow\nprocess go to /data_collection/flow_processes. To create a new flow process\nstep or screen type, go to /admin/content_types and enable the as Flow\nProcess step flag. Every new CMS module that you create with that flag\nrepresents a different type of screen that the user can use/customize.\u003c/p\u003e\n\n\u003cp\u003ePossible Question Types with their styles:\u003c/p\u003e\n\n\u003cpre\u003esingle_choice:\n  radio_buttons\n  dropdown\n  slider\nmultiple_choice\n  radio_buttons\n  dropdown\ninput:\n  text_area\n  text\nnumeric:\n  text_box\n  range\u003c/pre\u003e\n"
    },
    {
      "name": "apiv2data_collectioncontainers",
      "description": "\n\u003cp\u003eDefines a container object or a categorization of flow_processes which\nincludes the position of that flow process within the container. To view a\nlist of flow_processes sorted by position per container go to\n/data_collection/containers/:id where the id is the container\npermanent_link.\u003c/p\u003e\n"
    },
    {
      "name": "apiv2data_collectionlinked_step_comments",
      "description": "\n\u003cp\u003eRenders a collection of comments given a flow process and a linked step.\u003c/p\u003e\n"
    },
    {
      "name": "apiv2data_collectioncaptured_value_groups",
      "description": "\n\u003cp\u003eRepresents a capture of data submitted during a FlowProcess           This\ncan be created by a MobileUser, a Site or a Study\u003c/p\u003e\n\n\u003cpre\u003eUse the submited_at attribute to determine when the user answered the flow instead of the created_at\u003c/pre\u003e\n"
    },
    {
      "name": "apiv2reminderrules",
      "description": "\n\u003cp\u003eDefines the schedule and additional details that each kind\u003c/p\u003e\n\n\u003cpre class=\"ruby\"\u003e\u003cspan class=\"ruby-identifier\"\u003eof\u003c/span\u003e \u003cspan class=\"ruby-constant\"\u003eReminder\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eshould\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ehave\u003c/span\u003e. \u003cspan class=\"ruby-constant\"\u003eThe\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003erules\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ecan\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003ebe\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eredefined\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eby\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003epersonal\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003erules\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003eper\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003emobile\u003c/span\u003e \u003cspan class=\"ruby-identifier\"\u003euser\u003c/span\u003e\n\u003c/pre\u003e\n"
    },
    {
      "name": "apiv2dynamic_contents",
      "description": "\n\u003cp\u003eThis is the main resource that the mobile application will use. The dynamic\ncontents are grouped by their \u003ccode\u003econtent_type\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 id=\"label-Content+Type\"\u003eContent Type\u003cspan\u003e\u003ca href=\"#label-Content+Type\"\u003e\u0026para;\u003c/a\u003e \u003ca href=\"#top\"\u003e\u0026uarr;\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eA content type represents a group of contents that share the same\nattributes.Contents that belong to different \u003ccode\u003econtent_types\u003c/code\u003e can\nhave different attributes  and different behaviours.The\n\u003ccode\u003econtent_type\u003c/code\u003e has a \u003ccode\u003epermanent_link\u003c/code\u003e that identifies\ncontent_type uniquely, the \u003ccode\u003epermanent_link\u003c/code\u003e is the key to\nretrieve contents of a certain \u003ccode\u003econtent_type\u003c/code\u003e.\u003c/p\u003e\n"
    },
    {
      "name": "apiv2mobile_menus",
      "description": "\n\u003cp\u003eThe mobile menus are used to redirect the user to different screens and\nsections of the application. A mobile menu consist of: title: The title of\nthe mobile_menu, this should be shown in the device image: The icon of the\nmobile_menu action: The action that the devices need to execute when the\nmobile menu is tapped action_object: Complementary information for the\naction, this value depends on the action (Deprecated).\u003c/p\u003e\n"
    },
    {
      "name": "apiv2site_startlab_accreditations",
      "description": "\n\u003cp\u003eRepresents an accreditation that is associated given to a lab\u003c/p\u003e\n"
    },
    {
      "name": "apiv2site_startstudies",
      "description": "\n\u003cp\u003eStudies are encapsulating of the instance of a study template (previously\nknown as trial), and the staff members, addresses, etc. associated with the\nstudy.\u003c/p\u003e\n"
    },
    {
      "name": "apiv2site_startstudy_lab",
      "description": "\n\u003cp\u003eRepresent the relation between a Study and a Lab\u003c/p\u003e\n"
    },
    {
      "name": "apiv2site_startprimary_medical_boards",
      "description": ""
    },
    {
      "name": "apiv2site_startstudy_irb",
      "description": "\n\u003cp\u003eRepresent the relation between a Study and a Lab\u003c/p\u003e\n"
    },
    {
      "name": "apiv2site_startprimary_licenses",
      "description": ""
    },
    {
      "name": "apiv2site_startsite_labs",
      "description": "\n\u003cp\u003eRepresents the association between a lab and a site\u003c/p\u003e\n"
    },
    {
      "name": "apiv2site_startlab_directors",
      "description": "\n\u003cp\u003eRepresents a LabDirector that is going to be used during the Study Startup\nprocess\u003c/p\u003e\n"
    },
    {
      "name": "apiv2site_startstudy_addresses",
      "description": "\n\u003cp\u003eRetrieves the address/es associated with a given study\u003c/p\u003e\n"
    },
    {
      "name": "apiv2site_startsites",
      "description": ""
    },
    {
      "name": "apiv2site_startlabs",
      "description": "\n\u003cp\u003eRepresents a lab that is going to be used during the Study Startup process\u003c/p\u003e\n"
    },
    {
      "name": "apiv2site_startaddresses",
      "description": "\n\u003cp\u003eRetrieves the address/es associated with a given site and allows for their\ncreation, updating, and destruction.\u003c/p\u003e\n"
    },
    {
      "name": "apiv2eventreported_actions",
      "description": "\n\u003cp\u003eTrack actions count \u0026amp; trigger reward earnings for some badges.\u003c/p\u003e\n"
    },
    {
      "name": "apilog",
      "description": "\n\u003cp\u003eThis is a debugging tool that tracks error or debugging messages.\u003c/p\u003e\n\n\u003cp\u003eMost of the fields are optional and should be used only as guidelines,\nhowever depending on the amount of information tracked it can be easier to\nfind certain bugs.\u003c/p\u003e\n\n\u003cp\u003eThe only required field is the “Level”.\u003c/p\u003e\n"
    },
    {
      "name": "apiusers",
      "description": "\n\u003cp\u003eIdentifies the user inside the platform allowing the likes, favorites,\nprofile and other functionality to be saved\u003c/p\u003e\n"
    },
    {
      "name": "apidynamic_contents",
      "description": "\n\u003cp\u003eThis is the main resource that the mobile application will use. The dynamic\ncontents are grouped by their \u003ccode\u003econtent_type\u003c/code\u003e\u003c/p\u003e\n\n\u003ch2 id=\"label-Content+Type\"\u003eContent Type\u003cspan\u003e\u003ca href=\"#label-Content+Type\"\u003e\u0026para;\u003c/a\u003e \u003ca href=\"#top\"\u003e\u0026uarr;\u003c/a\u003e\u003c/span\u003e\u003c/h2\u003e\n\n\u003cp\u003eA content type represents a group of contents that share the same\nattributes. Contents that belong to different \u003ccode\u003econtent_types\u003c/code\u003e\ncan have different attributes and different behaviours. The\n\u003ccode\u003econtent_type\u003c/code\u003e has a \u003ccode\u003epermanent_link\u003c/code\u003e that identifies\na content_type uniquely, the \u003ccode\u003epermanent_link\u003c/code\u003e is the key to\nretrieve contents of a certain \u003ccode\u003econtent_type\u003c/code\u003e.\u003c/p\u003e\n"
    },
    {
      "name": "apistatus",
      "description": "\n\u003cp\u003eTracks the status of objects in association to their owner. The object\nwhose status will be tracked can belong to any of the STATUSABLE_TYPES. The\nowner for whom the status is tracked can be any of the OWNER TYPES.\u003c/p\u003e\n"
    },
    {
      "name": "apimobile_users",
      "description": "\n\u003cp\u003eIdentifies the user inside the platform allowing the likes, favorites,\nprofile and other functionality to be saved\u003c/p\u003e\n"
    },
    {
      "name": "apialert_messages",
      "description": ""
    },
    {
      "name": "apibadges",
      "description": "\n\u003cp\u003eMobile users can earn badges through various means: Events (from taking\naction) or after a certain period of time has elapsed.\u003c/p\u003e\n"
    },
    {
      "name": "apilanguages",
      "description": "\n\u003cp\u003eRetrieves relevant languages and valid translations for the application\u003c/p\u003e\n"
    },
    {
      "name": "apirelated_mobile_users",
      "description": "\n\u003cp\u003eRespresents all the users (followed and followers) that have a relationship\nwith the current user\u003c/p\u003e\n"
    },
    {
      "name": "consultvideo_sessions",
      "description": "\n\u003cp\u003eRepresents a (tokbox-based) video session.\u003c/p\u003e\n"
    },
    {
      "name": "consultconsultations",
      "description": "\n\u003cp\u003eRepresents a request, commonly from a patient, to have a (tokbox-based)\nvideo session with a facilitator (commonly a doctor, nurse, or study\ncoordinator).\u003c/p\u003e\n"
    }
  ],
  "host": "localhost:3000"
}